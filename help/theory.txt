Contents:
---------------------------------------------------------------------------------------------------------------------------------------------

1. ORM Methods: 𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬() Function
2. ORM Methods: 𝐮𝐬𝐞𝐫_𝐡𝐚𝐬_𝐠𝐫𝐨𝐮𝐩𝐬 Function
3. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: default_get Function
4. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: Sorted Function
5. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: 𝐅𝐢𝐥𝐭𝐞𝐫𝐞𝐝 Function
6. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: 𝐌𝐚𝐩𝐩𝐞𝐝 Function
7. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: Create
8. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: Read
9. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: Write
10. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: name_create
11. Методи ORM: name_get
12. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: Unlink
13. How do I execute a SQL 𝐪𝐮𝐞𝐫𝐲 inside an Odoo module?
14. Str2bool(value)
15. 𝐀𝐝𝐝(value, *args, **kwargs) function
16. 𝐞𝐧𝐝_𝐨𝐟 function
17. 𝐒𝐭𝐚𝐫𝐭_𝐨𝐟 function in Odoo
18. Model.with_env
19. Model.sudo()
20. Model.with_context()
21. 𝐌𝐨𝐝𝐞𝐥.𝐰𝐢𝐭𝐡_𝐜𝐨𝐦𝐩𝐚𝐧𝐲(𝐜𝐨𝐦𝐩𝐚𝐧𝐲)
22. 𝐓𝐡𝐞 𝐞𝐧𝐯𝐢𝐫𝐨𝐧𝐦𝐞𝐧𝐭 𝐜𝐚𝐧 𝐛𝐞 𝐚𝐥𝐭𝐞𝐫𝐞𝐝 𝐭𝐨 𝐜𝐡𝐚𝐧𝐠𝐞 𝐭𝐡𝐞 𝐛𝐞𝐡𝐚𝐯𝐢𝐨𝐫 𝐨𝐟 𝐭𝐡𝐞 𝐎𝐑𝐌
𝐢𝐧 𝐚 𝐯𝐚𝐫𝐢𝐞𝐭𝐲 𝐨𝐟 𝐰𝐚𝐲𝐬.
23. 𝐄𝐧𝐯𝐢𝐫𝐨𝐧𝐦𝐞𝐧𝐭 𝐈𝐧 𝐎𝐝𝐨𝐨
24. 𝐓𝐡𝐞 𝐜𝐨𝐩𝐲() 𝐅𝐮𝐧𝐜𝐭𝐢𝐨𝐧 𝐢𝐧 𝐎𝐝𝐨𝐨
25. _𝐮𝐧𝐢𝐧𝐬𝐭𝐚𝐥𝐥_𝐡𝐨𝐨𝐤 𝐈𝐧 𝐎𝐝𝐨𝐨
26. 𝐩𝐫𝐞_𝐢𝐧𝐢𝐭_𝐡𝐨𝐨𝐤 𝐈𝐧 𝐎𝐝𝐨𝐨
27. 𝐇𝐨𝐰 𝐭𝐨 𝐟𝐞𝐭𝐜𝐡 𝐟𝐢𝐥𝐞𝐬 𝐢𝐧 𝐌𝐨𝐝𝐮𝐥𝐞 𝐚𝐧𝐝 𝐫𝐞𝐚𝐝 𝐭𝐡𝐞𝐦, 𝐥𝐢𝐤𝐞 𝐚𝐬 𝐫𝐞𝐚𝐝𝐢𝐧𝐠 𝐚𝐧 𝐢𝐦𝐚𝐠𝐞, 𝐚 𝐭𝐱𝐭 𝐟𝐢𝐥𝐞, 𝐨𝐫 𝐚𝐧𝐲 𝐨𝐭𝐡𝐞𝐫 𝐟𝐢𝐥𝐞
28. 𝐈𝐟 𝐏𝐃𝐅 𝐫𝐞𝐩𝐨𝐫𝐭𝐬 𝐚𝐫𝐞 𝐧𝐨𝐭 𝐩𝐫𝐢𝐧𝐭𝐢𝐧𝐠 𝐢𝐧 𝐭𝐡𝐞 𝐜𝐨𝐫𝐫𝐞𝐜𝐭 𝐟𝐨𝐫𝐦𝐚𝐭
29. 𝐡𝐨𝐰 𝐝𝐨 𝐈 𝐦𝐚𝐤𝐞 𝐟𝐢𝐞𝐥𝐝𝐬 𝐞𝐝𝐢𝐭𝐚𝐛𝐥𝐞 𝐟𝐨𝐫 𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜 𝐠𝐫𝐨𝐮𝐩𝐬?
30. 𝐟𝐥𝐨𝐚𝐭_𝐫𝐞𝐩𝐫()
31. 𝐟𝐥𝐨𝐚𝐭_𝐬𝐩𝐥𝐢𝐭_𝐬𝐭𝐫() 𝐟𝐮𝐧𝐜𝐭𝐢𝐨𝐧
32. float_is_zero() 
33. float_compare()
34. 𝐚𝐮𝐭𝐨_𝐢𝐧𝐬𝐭𝐚𝐥𝐥
35. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : 𝐒𝐞𝐚𝐫𝐜𝐡()
36. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : 𝐬𝐞𝐚𝐫𝐜𝐡_𝐜𝐨𝐮𝐧𝐭()
37. 𝐞𝐱𝐩𝐫𝐞𝐬𝐬𝐢𝐨𝐧 𝐌𝐨𝐝𝐮𝐥𝐞
38. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : search_read()
39. auto_delete in odoo mail.template model

---------------------------------------------------------------------------------------------------------------------------------------------
1. ORM Methods : 𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬() Function

It is a helper function that can be used to verify that the current user is allowed to perform a given operation, like writing to a model.
Це допоміжна функція, яку можна використовувати для перевірки того, що поточному користувачеві дозволено виконувати задану операцію, наприклад, запис до моделі.

𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬
⚒ operation : create, read, write, or unlink
⚒ raise_exception: A boolean value that indicates whether an exception should be raised if the operation is forbidden.


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

self.with_user(4).env['account.move.line'].
𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬('read', raise_exception=False)
# 𝐓𝐫𝐮𝐞 or 𝐅𝐚𝐥𝐬𝐞 depends on security applied to the user

self.with_user(4).env['account.move.line'].
𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬('read',raise_exception=True)
# in case there are no access rights for this user,
# you will get 𝐞𝐱𝐜𝐞𝐩𝐭𝐢𝐨𝐧 like below
# You are not allowed to access 'Journal Item' (account.move.line) records


💡 What is the expected Exception if no access rights are granted ?
IF operation == read
# {AccessError} You are not allowed to access...
IF operation == create
# {AccessError} You are not allowed to create...
IF operation == delete
# {AccessError} You are not allowed to delete...
IF operation == write
# {AccessError} You are not allowed to modify...

Feel free to let me know if you need more information about when or how to use this function.

---------------------------------------------------------------------------------------------------------------------------------------------
2. ORM Methods : 𝐮𝐬𝐞𝐫_𝐡𝐚𝐬_𝐠𝐫𝐨𝐮𝐩𝐬 Function

The user_has_groups function is a model method that can be used to check
if the user is a member of at least one of the groups
specified in the groups passed.
Функція user_has_groups є модельним методом, який може бути використаний для перевірки
якщо користувач є учасником хоча б однієї з груп
зазначена в пройдених групах.

🌀  𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬
groups : comma-separated list of fully-qualified group external IDs

🌀  𝐑𝐞𝐭𝐮𝐫𝐧
True if the current user is a member of one of the groups in groups
else False

🌀  𝐄𝐱𝐚𝐦𝐩𝐥𝐞
groups = 'base.group_no_one, base.group_admin'
has_groups = self.𝐮𝐬𝐞𝐫_𝐡𝐚𝐬_𝐠𝐫𝐨𝐮𝐩𝐬(groups)
# True or False depend on groups assigned to the user

---------------------------------------------------------------------------------------------------------------------------------------------
3. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : default_get Function ☔

default_get() method can be used to get a list of fields' default values.

It takes a list of field names as input and gives back a dictionary
that maps field names to their default values.

Метод default_get() можна використовувати для отримання списку значень полів за замовчуванням.

Він приймає список назв полів як вхідні дані та повертає словник
, який зіставляє імена полів зі значеннями за замовчуванням.

🐟 # get a list of fields' default values
fields = ['𝐜𝐨𝐦𝐩𝐚𝐧𝐲_𝐢𝐝', '𝐬𝐭𝐚𝐭𝐞', '𝐝𝐚𝐭𝐞_𝐟𝐫𝐨𝐦']
self.env['hr.payslip'].default_get(fields)

# Result:
{'𝐜𝐨𝐦𝐩𝐚𝐧𝐲_𝐢𝐝': 1, '𝐝𝐚𝐭𝐞_𝐟𝐫𝐨𝐦': 2023-10-01, '𝐬𝐭𝐚𝐭𝐞': 'draft'}


🔽 The following determines the default values:

↪ From the field itself: If the field has a default value,
that value is used.

↪ From the context

↪ If there is a record for the field in the 𝐢𝐫.𝐝𝐞𝐟𝐚𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞,
The value of that record is used as the field's default value(s).

↪ From the parent model: If the field is inherited from a parent model, the default_get() function is called on the parent model to get the default value for the field.


🐟 # Update default value for field
@api.model
def default_get(self, fields_list):
x = super(MyModel, self).default_get(fields_list)
x['country_id'] = self.env.context.get('country_id')
return x

The default_get() function can be used to

🔆 save you time while creating new record
🔆 Improved user experience
🔆 Reduced errors when user entering data from form view
🔆 Increased efficiency: users can create new records more quickly and easily.

---------------------------------------------------------------------------------------------------------------------------------------------
4. 📚 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : Sorted Function

The sorted() function is a powerful function for ordering records.
It is possible to sort records using any field or even a custom function.

# Sort the records from oldest to newest by ID.
env['sale.order'].search([]).sorted(key='id')

The sorted() method takes three arguments  
♦ 𝘴𝘦𝘭𝘧 : The recordset that you want to

♦ key: A function or field name that is used to determine the sorting order.

♦ reverse: A boolean value that indicates whether the records should be sorted in reverse order


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

🐟 # Sort the records from 𝐨𝐥𝐝𝐞𝐬𝐭 to 𝐧𝐞𝐰𝐞𝐬𝐭
by create date.
env['sale.order'].search([]).
𝐬𝐨𝐫𝐭𝐞𝐝(key='create_date').
mapped('create_date')
# [ (2023, 10, 01), (2023, 10, 02), (2023, 10, 03)]


🐟 # Sort the records from 𝐧𝐞𝐰𝐞𝐬𝐭 to 𝐨𝐥𝐝𝐞𝐬𝐭
by create date.
env['sale.order'].search([]).
𝐬𝐨𝐫𝐭𝐞𝐝(key='create_date', 𝐫𝐞𝐯𝐞𝐫𝐬𝐞=𝐓𝐫𝐮𝐞).
mapped('create_date')

# [ (2023, 10, 03), (2023, 10, 02), (2023, 10, 01)]


🐟 # Sort the records using multiple fields
env['sale.order'].search([]).
𝐬𝐨𝐫𝐭𝐞𝐝(key=lambda x: (𝐱.𝐧𝐚𝐦𝐞, 𝐱.𝐩𝐚𝐫𝐭𝐧𝐞𝐫_𝐢𝐝, 𝐱.𝐜𝐫𝐞𝐚𝐭𝐞_𝐝𝐚𝐭𝐞))

# sale.order(1, 2, 3, 4)

---------------------------------------------------------------------------------------------------------------------------------------------
5. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : 𝐅𝐢𝐥𝐭𝐞𝐫𝐞𝐝 Function ☔

filtered() is a powerful function that allows you to filter records based on a given criteria. This can be useful for a variety of tasks, such as:

Only processing records that meet certain conditions. For example, you might want to only process records that have a certain status.

The filtered() function takes two arguments:

♦ 𝘴𝘦𝘭𝘧 :  The recordset that you want to filter.
♦ 𝘧𝘶𝘯𝘤 : A function or a dot-separated sequence of field names

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

# Only keep records of whose user is the current user.
⏩ records.filtered(lambda r: r.user_id == user.id)

# Only keep records that have a status of "done".
⏩ records.filtered("state == 'done'")

# Only keep records of whose partner is a company.
⏩ records.filtered("partner_id.is_company")

The filtered() function is very efficient and can be used
to filter large recordsets quickly

---------------------------------------------------------------------------------------------------------------------------------------------
6. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : 𝐌𝐚𝐩𝐩𝐞𝐝 Function ☔

mapped() is quite important in code optimization
It avoids loops that have been defined by the user.
It gives you a list of field values. Its argument accepts a string value as the column name and returns all the possible values from the recordset.

The mapped() function takes two arguments:

𝐬𝐞𝐥𝐟: The recordset to which the function will be applied.
𝐟𝐮𝐧𝐜: A function or a field name sequence separated by a dot.


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

🌀 self.env['res.partner'].search([]).𝐦𝐚𝐩𝐩𝐞𝐝('email')
# ['test1@yourcompany', 'test2@agrolait', 'test3@example']

🌀 records.𝐦𝐚𝐩𝐩𝐞𝐝(lambda r: r.field1 + r.field2)
# loop every record and sum two fields

🌀 self.env['sale.order'].search([]).
𝐦𝐚𝐩𝐩𝐞𝐝('order_line.product_uom_qty')
# [3.0, 3.0, 2.0, 4.0, 6.0]
# Return quantity from each order line from order_line for each sale order


𝐓𝐡𝐞 𝐦𝐚𝐩𝐩𝐞𝐝() function can be used to implement a variety of different data transformations, such as:

❄ Calculating new fields
❄ Filtering records
❄ Converting recordsets to different formats
❄ Joining recordsets

---------------------------------------------------------------------------------------------------------------------------------------------
7. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : Create 📚

It is used to create new records for a given model. It takes a 𝐥𝐢𝐬𝐭 𝐨𝐟 𝐝𝐢𝐜𝐭𝐢𝐨𝐧𝐚𝐫𝐢𝐞𝐬 as input, where each dictionary represents the values for the fields of the new record.

𝐑𝐞𝐭𝐮𝐫𝐧:  a list of the created records.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞

self.env['res.partner'].create(
[
{'name': 'test1'},
{'name': 'test2'}
])
# Result : res.partner(7, 8)


𝐃𝐞𝐜𝐨𝐫𝐚𝐭𝐞𝐝 𝐰𝐢𝐭𝐡 🔽

1️⃣ The @api.model_create_multi decorator : indicates that the function can be used to create multiple records at once.
2️⃣ The @api.returns() decorator : indicates that the function returns a list of records.

🔆 If you don't know what a 𝐝𝐞𝐜𝐨𝐫𝐚𝐭𝐨𝐫 is or how work don't worry,
we'll talk about that in more detail in the post about how to make your own decorator.

🔆 The create method first checks if the user has permission
to create records of the specified model.
If the user does not have permission, an AccessError is raised.

----------------------------------------------------------------------------------------------------------------------------------------------
8. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 :Read 📚

it allows you to read data from the database.
It 𝐭𝐚𝐤𝐞𝐬 𝐚 𝐥𝐢𝐬𝐭 𝐨𝐟 𝐟𝐢𝐞𝐥𝐝𝐬 𝐚𝐬 𝐢𝐧𝐩𝐮𝐭 and returns a list of dictionaries mapping field

it takes param called 𝐟𝐢𝐞𝐥𝐝𝐬 : This parameter specifies which
fields you want to read from the database.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞

fields = ['name', 'email']
res = self.env['res.partner'].browse( (7,8) ).read(fields)

Result
# [
# {'email': 'mark.brown23@example', 'id': 7, 'name': 'Marc Demo'},
# {'email': 'joel.willis63@example', 'id': 8, 'name': 'Joel Willis'}
# ]

💡 IF you do not specify any fields the read function will return
all fields for the record.


- How work ?

works by first fetching the stored fields from the database to the cache. 
Stored fields are fields that are stored in the database

- Why important ?

- Send data to Another system (Integration)
- Display data in a list view or form view
- Export data to a file

---------------------------------------------------------------------------------------------------------------------------------------------
9. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : Write 📚

write() function is a used for updating records. 
It allows you to update multiple fields on multiple records at once 
and it handles all of the necessary validation and security checks for you.

𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬:

1️⃣ self: This is the record or set of records that you want to write.
2️⃣ vals: This is a dictionary of field names and values.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

🔰# update multi records
orders= self.env['sale.order'].browse((6, 7))
orders.write({'state': 'to_cancel'})

🔰 # update one record
self.user_admin = self.env.ref('base.user_admin')
self.user_admin.write({'name': 'Zahra'})


↪ raise 𝐀𝐜𝐜𝐞𝐬𝐬𝐄𝐫𝐫𝐨𝐫: if user is not allowed to modify the specified records/fields

---------------------------------------------------------------------------------------------------------------------------------------------
10. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : name_create 📚

convenient way to create a new record by providing only the display name (𝐫𝐞𝐜_𝐧𝐚𝐦𝐞).

The name_create() method will initialize the new record with any default values applicable to the model or provided through the context.

𝐚𝐫𝐠𝐮𝐦𝐞𝐧𝐭: the display name of the new record
𝐫𝐞𝐭𝐮𝐫𝐧 : name_get for the record

𝐄𝐱𝐚𝐦𝐩𝐥𝐞

self.env['res.partner'].name_create('Test1')
# Output : (1, 'Test 1')

⏩ The usual behavior of create() applies, such as checking access rights.

⏩ useful method for creating new records quickly and easily then handle more data later on

🔰 What happens if you call this method on a model that doesn't have a rec_name?
Return 𝐅𝐚𝐥𝐬𝐞 and in log, we have below warning
"""Cannot execute name_create, no _rec_name defined..."""

Don't worry if you have trouble with 𝐫𝐞𝐜_𝐧𝐚𝐦𝐞; we'll look into it more when we talk about class attributes that Odoo provide

---------------------------------------------------------------------------------------------------------------------------------------------
11. Методи ORM : name_get 📚

Метод name_get(), визначений у базовій моделі, дозволяє налаштувати спосіб відображення записів.

За замовчуванням функція name_get() просто повертає значення поля rec_name. Однак цю функцію можна перевизначити, щоб створити власну логіку відображення записів.

Приклад 🔰

Можливо, потрібно відобразити назву замовлення на продаж разом із іменем партнера для записів, які відображаються в режимі зв'язку

def name_get(self):
    результат = []
    Для запису в себе:
      result.append((record.id, "%s (%s)" %
(record.name, record.partner_id.ім'я)))
    Результат повернення

Чому важливо? 🔰

За допомогою функції name_get() можна відобразити додаткову інформацію про кожен запис, наприклад електронну пошту та стан клієнта або вартість продукту

Це може зробити ваші списки та розкривні меню простішими для розуміння та більш читабельними.

---------------------------------------------------------------------------------------------------------------------------------------------
12. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : Unlink 📚

It is a simple method used for deleting records from the database.
There is no way to undo the deletion once you have executed it.
Це простий метод, який використовується для видалення записів з бази даних.
Неможливо скасувати видалення після його виконання.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞 🔰

cancel_orders= env['sale.order'].search([('state', '=', 'cancel')])
cancel_orders.𝐮𝐧𝐥𝐢𝐧𝐤()
# Return True

𝐇𝐨𝐰 𝐰𝐨𝐫𝐤 ?

➡ Checking access rights to ensure that the user is allowed to delete the records
➡ Deleting any attachments associated with the records
➡ Invalidating the entire cache
➡ Deleting the records' properties

Як працюють ?

➡ Перевірка прав доступу, щоб переконатися, що користувачеві дозволено видаляти записи
➡ Видалення вкладень, пов'язаних із записами
➡ Визнання недійсним усього кешу
➡ Видалення властивостей записів

---------------------------------------------------------------------------------------------------------------------------------------------
13. How do I execute a SQL 𝐪𝐮𝐞𝐫𝐲 inside an Odoo module? 👾

1️⃣ 𝐜𝐫 = 𝐬𝐞𝐥𝐟.𝐞𝐧𝐯.𝐜𝐫
You can use the self.env.cr object. This object provides a direct connection
to the database.
Можна використовувати об'єкт self.env.cr. Цей об'єкт забезпечує пряме з'єднання
в базу даних.

2️⃣ 𝐜𝐫.𝐞𝐱𝐞𝐜𝐮𝐭𝐞() 
Use the cr.execute() method to execute the query.
You can pass in the query as a string or as a variable containing the query
Використовуйте метод cr.execute() для виконання запиту.
У запиті можна передати рядок або змінну, що містить запит

3️⃣ 𝐜𝐫.𝐟𝐞𝐭𝐜𝐡𝐚𝐥𝐥()
Use the cr.fetchall() method to fetch the results of the query.
This will return a list of tuples, where each tuple represents
a row in the result set.
Використовуйте метод cr.fetchall() для отримання результатів запиту.
Це поверне список кортежів, де кожен кортеж представляє
рядок у наборі результатів.

4️⃣ 𝐃𝐨 𝐬𝐨𝐦𝐞𝐭𝐡𝐢𝐧𝐠 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭𝐬

Example 🎲

cr = self.env.cr

# Execute the query
cr.execute(""" SELECT id ,name,email
FROM res_partner
WHERE id in %s
""", (((1, 2)),))

res = cr.fetchall()

# Do something with the results
res_data = { id: (name, email) for id, name, email in res }

# Result
# {
# 1: ('My Company (San Francisco)', info@yourcompany'),
# 2: ('OdooBot', 'odoobot@example')
# }

---------------------------------------------------------------------------------------------------------------------------------------------
14. Str2bool(value) 🚀

Sometimes, when we're working in Odoo, we need to change the return result to a bool. To do this, you can import a simple function called str2bool.

takes a string as input and converts it to a boolean value.

Іноді, коли ми працюємо в Odoo, нам потрібно змінити результат повернення на булеве значення. Для цього можна імпортувати просту функцію під назвою str2bool.

приймає рядок як вхідні дані та перетворює його на логічне значення.

➖➖➖

𝐏𝐚𝐫𝐚𝐦𝐬
value (str)

𝐑𝐞𝐭𝐮𝐫𝐧 
The boolean value is True if the string is one of the following: 
"y", "yes", "1", "true", "t", or "on".

The boolean value is False if the string is one of the following:
"n", "no", "0", "false", "f", or "off".

If the string is not in any of the above lists,
The function raises a ValueError exception.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

❇️ str2bool('yes')
>>> True

❇️ str2bool('off')
>>> False

❇️ str2bool(‘foo’)
>>> Exception from type {ValueError}

---------------------------------------------------------------------------------------------------------------------------------------------
15. 𝐀𝐝𝐝(value, *args, **kwargs) function

The add function defined in date utils Package can be used to add days, weeks, and months to a date / datetime
Функція add, визначена в date utils Package, може бути використана для додавання днів, тижнів і місяців до дати / datetime

𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬

- 𝐯𝐚𝐥𝐮𝐞: This is the initial date or datetime that you want
to add the relativedelta to.

- *𝐚𝐫𝐠𝐬: A variable number of positional arguments explicitly passed to the relativedelta() class.

- **𝐤𝐰𝐚𝐫𝐠𝐬: This is a dictionary of keyword arguments sent straight to the relativedelta() class.

Аргументи

- value: це початкова дата або дата, яку ви хочете
, щоб додати відносну дельту до.

- *args: Змінна кількість позиційних аргументів, явно переданих класу relativedelta().

- **kwargs: Це словник аргументів ключових слів, що надсилаються безпосередньо до класу relativedelta().

𝐑𝐞𝐭𝐮𝐫𝐧: date/datetime

-------------

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬 📢

# import
from datetime import 𝐝𝐚𝐭𝐞
from odoo.tools.date_utils import 𝐚𝐝𝐝

>>> add(date(2023,8, 7), days=1)
2023-08-08

>>> add(date(2023,8, 7), weeks=1)
2023-08-14

>>> add(date(2023,8, 7), months=1)
2023-09-07

>>> add(date(2023,8, 7), years=1)
2024-08-07

The below expression is used to add days, months, and years together.
>>> add(date(2023, 8, 7), days = 1, months = 1, years = 1)
2024-09-08

---------------------------------------------------------------------------------------------------------------------------------------------
16. 𝐞𝐧𝐝_𝐨𝐟 function 💡

𝐞𝐧𝐝_𝐨𝐟 is a built-in function in Odoo that can be used to get the end of a time period.
end_of - це вбудована функція в Odoo, яку можна використовувати для отримання кінця періоду часу.

The time period can be specified by a string
such as “hour”,"day", "week", or "month"
Період часу може бути вказано рядком
Наприклад, "година", "день", "тиждень" або "місяць"

This function takes two arguments:
Ця функція приймає два аргументи:

1️⃣ 𝐯𝐚𝐥𝐮𝐞: A date or datetime object.
2️⃣ 𝐠𝐫𝐚𝐧𝐮𝐥𝐚𝐫𝐢𝐭𝐲: The allowed values are
year, quarter, month, week, day, and hour

1️⃣ value: об'єкт date або datetime.
2️⃣ деталізація: допустимі значення
рік, квартал, місяць, тиждень, день і година

𝐑𝐞𝐭𝐮𝐫𝐧
a date/datetime object corresponding to the end of the specified period.
об'єкт date/datetime, що відповідає закінченню вказаного періоду.


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬 📢

# import
from datetime import date, datetime
from odoo.tools.date_utils import end_of


# get end of year
>>> end_of(date(2023, 9, 12), "year")
2023-12-31

# get end of month
>>> end_of(date(2023, 9, 12), "month")
2023-09-30

# get end of week
>>> end_of(date(2023, 9, 12), "week")
2023-09-17

# get end of hour
>>> end_of(datetime(2023, 9, 12, 14, 10), "hour")
2023-09-12 14:59:59.999999

-------------

in case you need to know the start of time period, check below

---------------------------------------------------------------------------------------------------------------------------------------------
17. 𝐒𝐭𝐚𝐫𝐭_𝐨𝐟 function in Odoo 💡

The start_of is a built-in function in Odoo that can be used to get the start of a time period.
start_of - це вбудована функція в Odoo, яку можна використовувати для отримання початку періоду часу.

The time period can be specified by a string
such as “hour”,"day", "week", or "month"
Період часу може бути вказано рядком
Наприклад, "година", "день", "тиждень" або "місяць"


This function takes two arguments:
Ця функція приймає два аргументи:

1️⃣ 𝐯𝐚𝐥𝐮𝐞: A date or datetime object.
2️⃣ 𝐠𝐫𝐚𝐧𝐮𝐥𝐚𝐫𝐢𝐭𝐲: The allowed values are
year, quarter, month, week, day, and hour.

1️⃣ value: об'єкт date або datetime.
2️⃣ деталізація: допустимі значення
рік, квартал, місяць, тиждень, день і година.

𝐑𝐞𝐭𝐮𝐫𝐧
a date/datetime object corresponding to the start of the specified period.
об'єкт date/datetime, що відповідає початку вказаного періоду.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬 💥

# import
from datetime import datetime
from odoo.tools.date_utils import 𝐬𝐭𝐚𝐫𝐭_𝐨𝐟

# get the start of year
>>> start_of(datetime(2023, 8, 31), "year")
2023-01-01 00:00:00

# get the start of month
>>> start_of(datetime(2023, 8, 31), "month")
2023-08-01 00:00:00

# get the start of week
>>> start_of(datetime(2023, 8, 31), "week")
2023-08-28 00:00:00

# get the start of hour
>>> start_of(datetime(2023, 8, 31, 14, 55), "hour")
2023-08-31 14:00:00

---------------------------------------------------------------------------------------------------------------------------------------------
18. Model.with_env 🚀

The with_env() method temporarily changes the environment of the current model to the new environment.
Метод with_env() тимчасово змінює оточення поточної моделі на нове середовище.

This can be useful for testing code in different contexts or accessing data that is not normally accessible in the current environment.
Це може бути корисним для тестування коду в різних контекстах або доступу до даних, які зазвичай недоступні в поточному середовищі.

Return a new version of this recordset attached to the provided environment
Повертає нову версію цього набору записів, долучену до наданого середовища

𝐇𝐨𝐰 𝐭𝐨 𝐮𝐬𝐞 ❓

To use the with_env() method, you first need to create a new environment object. You can do this by passing the current environment to the with_env() method.
Щоб використовувати метод with_env(), спочатку потрібно створити новий об'єкт середовища. Зробити це можна, передавши поточне середовище в метод with_env().

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

❇️ env_object = self.env(
user=self.browse_ref('base.public_user'))

self = self.with_env(env_objcect)

❇️ env_object_ = api.Environment(
cr, self._session.uid, self._session.context)

self = self.with_env(env_objcect)

➖➖➖

𝐖𝐡𝐲 𝐢𝐬 𝐢𝐭 𝐢𝐦𝐩𝐨𝐫𝐭𝐚𝐧𝐭?

⏏ Testing code in a different environment
⏏ Changing the current Cr ( database cursor), Context, and user , Language
⏏ Change the entire environment for the model

⏏ Тестування коду в іншому середовищі
⏏ Зміна поточного Cr ( курсор бази даних), Контекст і користувач , Мова
⏏ Змініть все оточення для моделі

---------------------------------------------------------------------------------------------------------------------------------------------
19. Model.sudo() 💧

The method is used to turn on superuser mode for a model.
Метод використовується для ввімкнення режиму суперкористувача для моделі.

When 𝐬𝐮𝐩𝐞𝐫𝐮𝐬𝐞𝐫 𝐦𝐨𝐝𝐞 is turned on, the user skips all checks for access rights and can do anything they want. This can help the user do things like create, delete, or change records that they usually wouldn't be able to do in a normal way.
При включенні режиму суперкористувача користувач пропускає всі перевірки прав доступу і може робити все, що захоче. Це може допомогти користувачеві виконувати такі дії, як створення, видалення або змінення записів, які він зазвичай не може робити звичайним способом.

🥁 𝑬𝒙𝒂𝒎𝒑𝒍𝒆

self.env['project.task'].𝐬𝐮𝐝𝐨().browse(7).unlink()

# with sudo False
repairs = self.𝐬𝐮𝐝𝐨().repair_ids
if repairs:
repairs.𝐬𝐮𝐝𝐨(𝐅𝐚𝐥𝐬𝐞).state = '2binvoiced'

➖➖➖

🥁 The Model.sudo() method takes an optional argument, flag,
which specifies whether to enable or disable superuser mode.
The default value of flag is true.

🥁 Метод Model.sudo() приймає необов'язковий аргумент, flag,
який визначає, вмикати або вимикати режим суперкористувача.
Типовим значенням flag є true.

➖➖➖

☘ The Model.sudo() method should be used for a limited time
☘ Метод Model.sudo() слід використовувати протягом обмеженого часу

☘ The Model.sudo() method should be used with caution, as it can bypass all access rights checks
☘ Метод Model.sudo() слід використовувати з обережністю, оскільки він може обійти всі перевірки прав доступу

---------------------------------------------------------------------------------------------------------------------------------------------
20. Model.with_context()

with_context() method returns a new model object with the modified context. This object can then be used to access the 𝐦𝐨𝐝𝐞𝐥'𝐬 𝐦𝐞𝐭𝐡𝐨𝐝𝐬 𝐚𝐧𝐝 𝐚𝐭𝐭𝐫𝐢𝐛𝐮𝐭𝐞𝐬.
Метод with_context() повертає новий об'єкт моделі зі зміненим контекстом. Потім цей об'єкт може бути використаний для доступу до методів та атрибутів моделі.

The method is often used to temporarily change the context for a specific operation
Метод часто використовується для тимчасової зміни контексту певної операції

such as changing the current user, date, company, language, timezone, 𝐚𝐧𝐝 𝐜𝐮𝐬𝐭𝐨𝐦-𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜 𝐤𝐞𝐲
Наприклад, зміна поточного користувача, дати, компанії, мови, часового поясу та спеціального ключа

❇️ 𝑬𝒙𝒂𝒎𝒑𝒍𝒆

self.env['account.move'].browse(10).
𝐰𝐢𝐭𝐡_𝐜𝐨𝐧𝐭𝐞𝐱𝐭(𝐩𝐫𝐢𝐧𝐭_𝐦𝐞𝐬𝐬𝐚𝐠𝐞=𝐓𝐫𝐮𝐞).send_and_print_action ()

def send_and_print_action(self):
# Here, check if key passed; if yes,
# make any logic you need
if self.env.𝐜𝐨𝐧𝐭𝐞𝐱𝐭.𝐠𝐞𝐭('print_message', False):
print(“مرحبا”)


❇️ 𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬 𝐟𝐫𝐨𝐦 𝐎𝐝𝐨𝐨

☘ self.env['res.users'].with_context(active_test=False)

☘ self.env['account.move.line'].browse(to_delete).
with_context(dynamic_unlink=True).unlink()

☘ res = super(AccountMove, self.with_context(skip_account_move_synchronization=True)).write(vals)


➖➖➖

❇️Use Cases?

☘ Changing the language that is being used
Зміна мови, що використовується

☘Changing the date and timezone
Зміна дати та часового поясу

☘ You can use "with context" with all of the methods described in "Model" and make some conditions based on the key you get. This is very helpful in many situations.
 Ви можете використовувати "з контекстом" з усіма методами, описаними в розділі "Модель", і створити деякі умови на основі ключа, який ви отримуєте. Це дуже допомагає в багатьох ситуаціях.

✨ The context changes are only temporary. They will be reverted back to the original values when the with_context() block is exited.
Зміни контексту є лише тимчасовими. Вони будуть повернуті до початкових значень при виході з блоку with_context().

---------------------------------------------------------------------------------------------------------------------------------------------
21. 𝐌𝐨𝐝𝐞𝐥.𝐰𝐢𝐭𝐡_𝐜𝐨𝐦𝐩𝐚𝐧𝐲(𝐜𝐨𝐦𝐩𝐚𝐧𝐲)

This Function can be useful for things like making a new Order or changing a product, which should only be done for a certain company.
Ця функція може бути корисною для таких речей, як оформлення нового замовлення або зміна продукту, що слід робити тільки для певної компанії.

Also, you need to do something that only applies to one company, but you don't want to change the session's default company.
Крім того, вам потрібно зробити щось, що стосується лише однієї компанії, але ви не хочете змінювати компанію за замовчуванням сесії.


➖➖➖➖➖

𝐌𝐨𝐝𝐞𝐥.𝐰𝐢𝐭𝐡_𝐜𝐨𝐦𝐩𝐚𝐧𝐲(𝐜𝐨𝐦𝐩𝐚𝐧𝐲) Function

❇️ 𝘗𝘢𝘳𝘢𝘮𝘦𝘵𝘦𝘳𝘴
company (res_company or int): the main company of the new environment.
Компанія (res_company або int): головна компанія нового середовища.

❇️ 𝘙𝘦𝘵𝘶𝘳𝘯
a new version of this recordset with a modified context
Нова версія цього набору записів зі зміненим контекстом

❇️ 𝘌𝘹𝘢𝘮𝘱𝘭𝘦
Suppose you have current company called company_1 in your session and you need to create Partner with another company (company_2)
Припустимо, у вашій сесії є поточна компанія під назвою company_1 і вам потрібно створити партнера з іншою компанією (company_2)

company_2 = self.env[‘res.company’].browse(2)
self.env['res.partner'].with_company(company_2).create({
'name': 'Testing Partner'
})

➖➖➖

💫 𝐖𝐡𝐞𝐧 𝐭𝐨 𝐮𝐬𝐞?

☘ When you need to add, change, or delete a record in a model but you want the record to be run in a particular company,
якщо потрібно додати, змінити або видалити запис у моделі, але потрібно, щоб запис виконувався в певній компанії,

☘ Search for list of some records for a specific company
 Пошук списку деяких записів для конкретної компанії

It is important to note that the company context is only changed temporarily.
Важливо зазначити, що контекст компанії змінюється лише тимчасово.

---------------------------------------------------------------------------------------------------------------------------------------------
22. 𝐓𝐡𝐞 𝐞𝐧𝐯𝐢𝐫𝐨𝐧𝐦𝐞𝐧𝐭 𝐜𝐚𝐧 𝐛𝐞 𝐚𝐥𝐭𝐞𝐫𝐞𝐝 𝐭𝐨 𝐜𝐡𝐚𝐧𝐠𝐞 𝐭𝐡𝐞 𝐛𝐞𝐡𝐚𝐯𝐢𝐨𝐫 𝐨𝐟 𝐭𝐡𝐞 𝐎𝐑𝐌
𝐢𝐧 𝐚 𝐯𝐚𝐫𝐢𝐞𝐭𝐲 𝐨𝐟 𝐰𝐚𝐲𝐬. 🎲
Середовище може бути змінено для зміни поведінки ORM
різними способами. 

Sometimes you need to make adjustments to the environment in Odoo
Іноді потрібно внести корективи в середовище в Odoo

These modifications may involve accessing specific records by activating superuser mode, activating a specific company,
altering the current user or changing the context with a specified timezone
Ці модифікації можуть включати доступ до певних записів шляхом активації режиму суперкористувача, активації певної компанії,
Зміна поточного користувача або зміна контексту з вказаним часовим поясом

➖➖➖➖

💫 Model.with_user(user) 𝘍𝘶𝘯𝘤𝘵𝘪𝘰𝘯

❇️ 𝘗𝘢𝘳𝘢𝘮𝘦𝘵𝘦𝘳𝘴 : user (res_users object or int)
New user for the new environment.
Новий користувач для нового середовища.

❇️ 𝘙𝘦𝘵𝘶𝘳𝘯 : a new version of this recordset attached to the given user
This means that the new recordset will have the permissions of the given user.
and not the permissions of the current user.
Return: нова версія цього набору записів, прикріплена до даного користувача
Це означає, що новий набір записів матиме права доступу вказаного користувача.
а не дозволи поточного користувача.

❇️ Example
self.env['product.product']. \
𝐰𝐢𝐭𝐡_𝐮𝐬𝐞𝐫(self.env.ref('base.user_admin')). \
create({ 'name': 'Test', 'price': 10})

➖➖➖

💫 𝐖𝐡𝐞𝐧 𝐭𝐨 𝐮𝐬𝐞?

-- You have issue with access rights
or not able to access specific rules and need high level of security
in this case, you can use it
У вас проблема з правами доступу
або не можуть отримати доступ до певних правил і потребують високого рівня безпеки
В цьому випадку можна використовувати його

-- call methods on a model as a different user
виклик методів на моделі від імені іншого користувача

---------------------------------------------------------------------------------------------------------------------------------------------
23. 𝐄𝐧𝐯𝐢𝐫𝐨𝐧𝐦𝐞𝐧𝐭 𝐈𝐧 𝐎𝐝𝐨𝐨 🚡

The environment in Odoo is an object that stores various contextual data used by the ORM. This data includes:
Середовище в Odoo - це об'єкт, який зберігає різні контекстні дані, що використовуються ORM. Ці дані включають:

📍uid : The current user, which is used to check access rights
поточний користувач, який використовується для перевірки прав доступу

📍cr: The current database cursor (for database queries)
поточний курсор бази даних (для запитів до бази даних)

📍context: The current context, which is used to store arbitrary metadata
поточний контекст, який використовується для зберігання довільних метаданих

📍su: Superuser mode
режим суперкористувача

📍It also holds a cache for records
Він також містить кеш для записів

Using the method listed below, you can access the environment.
За допомогою методу, наведеного нижче, ви можете отримати доступ до середовища.

👉 𝐬𝐞𝐥𝐟.𝐞𝐧𝐯
Output : <Environment object>

-------------------------------------

Now let's look at some predefined functions, which can be accessed using 𝒆𝒏𝒗
Тепер давайте розглянемо деякі попередньо визначені функції, доступ до яких можна отримати за допомогою env

🏹 𝐫𝐞𝐟(self, xml_id, raise_if_not_found=True)
Return the record corresponding to the given 'xml_id'
Повертає запис, що відповідає вказаному «xml_id»

👉 self.env.𝐫𝐞𝐟('mail.mt_note')


🏹 𝐢𝐬_𝐬𝐲𝐬𝐭𝐞𝐦
     Return whether the current user has group 'Settings'
or is in superuser mode
Повертається, чи є у поточного користувача група "Налаштування"
або знаходиться в режимі суперкористувача

👉 self.env.𝐢𝐬_𝐬𝐲𝐬𝐭𝐞𝐦()


🏹 𝐮𝐬𝐞𝐫
     Return the current user
 Повертає поточного користувача

👉 self.env.𝐮𝐬𝐞𝐫


🏹 𝐜𝐨𝐦𝐩𝐚𝐧𝐲
     Return the current company
Повернути поточну компанію

👉 self.env.𝐜𝐨𝐦𝐩𝐚𝐧𝐲


🏹 𝐜𝐨𝐦𝐩𝐚𝐧𝐢𝐞𝐬
Return a recordset of the enabled companies by the user
Повертає користувачеві набір записів увімкнених компаній

👉 self.env.𝐜𝐨𝐦𝐩𝐚𝐧𝐢𝐞𝐬


🏹 𝐥𝐚𝐧𝐠
Return the current language code
Повертає поточний код мови

👉 self.env.𝐥𝐚𝐧𝐠

---------------------------------------------------------------------------------------------------------------------------------------------
24. 𝐓𝐡𝐞 𝐜𝐨𝐩𝐲() 𝐅𝐮𝐧𝐜𝐭𝐢𝐨𝐧 𝐢𝐧 𝐎𝐝𝐨𝐨 📯

In some cases, you need to take the same fields from record and make new one with a few changes
У деяких випадках потрібно взяти ті ж поля з запису і зробити нове з невеликими змінами

The copy function defined in ORM methods In Odoo
Функція копіювання, визначена в методах ORM В Odoo

is used to 𝐜𝐫𝐞𝐚𝐭𝐞 𝐚 𝐝𝐮𝐩𝐥𝐢𝐜𝐚𝐭𝐞 𝐨𝐟 𝐚𝐧 𝐞𝐱𝐢𝐬𝐭𝐢𝐧𝐠 𝐫𝐞𝐜𝐨𝐫𝐝
It is a built-in function that is available on all Odoo models
використовується для створення дубліката існуючого запису
Це вбудована функція, яка доступна на всіх моделях Odoo

𝐏𝐚𝐫𝐚𝐦𝐬 📣
it takes one parameter called default
Він приймає один параметр, який називається default

The default parameter is a dictionary of field values that can be used to override the contents of the original record when it is duplicated.
Параметр за промовчанням — це словник значень полів, який можна використовувати для перевизначення вмісту вихідного запису під час його дублювання.

In this case, it will duplicate except for the values that have been overridden in the 𝐝𝐞𝐟𝐚𝐮𝐥𝐭 parameter.
У цьому випадку він дублюватиметься, за винятком значень, які були перевизначені в параметрі за замовчуванням.

you can override in your model and add your changes depending on your business
Ви можете змінити свою модель і додати зміни залежно від вашої компанії

--------

# example
def copy(self, default=None):
if default is None:
default = {}
default['name'] = 'Copy of %s' % self.name
return super(HelpDeskTicket, self).copy(default)

----------

𝐔𝐬𝐞 𝐂𝐚𝐬𝐞𝐬 📣

1️⃣ very useful tool for duplicating records in Odoo
to create a new record that is identical to an existing record
дуже корисний інструмент для дублювання записів в Odoo
створення нового запису, ідентичного наявному запису;

2️⃣ create a new record with some of the values overridden
Створіть новий запис із перевизначеними деякими значеннями

3️⃣ it can be used to create a new product based on an existing product
Його можна використовувати для створення нового продукту на основі існуючого продукту

---------------------------------------------------------------------------------------------------------------------------------------------
25. _𝐮𝐧𝐢𝐧𝐬𝐭𝐚𝐥𝐥_𝐡𝐨𝐨𝐤 𝐈𝐧 𝐎𝐝𝐨𝐨? ❇️

A _uninstall_hook in Odoo is a function that is called once a module is uninstalled.
це функція, яка викликається після видалення модуля.

This function can be used to clean up any data or configuration that the module has generated.
Цю функцію можна використовувати для очищення будь-яких даних або конфігурації, створених модулем.

𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬
- cr : The database cursor (is used to perform operations on the database)
- registry

𝐰𝐡𝐲 𝐢𝐭 𝐢𝐬 𝐢𝐦𝐩𝐨𝐫𝐭𝐚𝐧𝐭 ? 🌟

It is a good place to perform any cleanup operations that are necessary, such as deleting data or removing records from the database, when uninstalling modules.
Це гарне місце для виконання будь-яких необхідних операцій очищення, таких як видалення даних або видалення записів з бази даних, під час видалення модулів.

➖➖➖➖➖➖

𝐇𝐨𝐰 𝐭𝐨 𝐔𝐬𝐞 ?

The function is defined in the __init__ file
then in __manifest__called using key _uninstall_hook
Функція визначена у файлі __init__
потім в __manifest__called за допомогою ключа _uninstall_hook

# __init__
def test_uninstall(cr, registry):
pass

# __manifest__
“_uninstall_hook”:”test_uninstall”

➖➖➖➖➖➖

𝐒𝐨𝐦𝐞 𝐔𝐬𝐞 𝐂𝐚𝐬𝐞𝐬

❇️ clean up any data that was created by the module. -> Очистіть усі дані, які були створені модулем.
❇️ It prevents unused data from being left in the database. -> Це запобігає залишенню невикористаних даних у базі даних.
❇️ To remove configuration that was created by the module. -> Щоб видалити конфігурацію, створену модулем.

---------------------------------------------------------------------------------------------------------------------------------------------
26. 𝐩𝐫𝐞_𝐢𝐧𝐢𝐭_𝐡𝐨𝐨𝐤 𝐈𝐧 𝐎𝐝𝐨𝐨? ☔

A pre_init_hook is a function that is run before the installation of a module.
це функція, яка запускається перед встановленням модуля.

𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬
takes a single argument, which is the database cursor (cr)
приймає один аргумент, яким є курсор бази даних (CR)

𝐰𝐡𝐲 𝐢𝐭 𝐢𝐬 𝐢𝐦𝐩𝐨𝐫𝐭𝐚𝐧𝐭 ? 🤔

❄ it can be used to execute SQL queries and perform other database operations
   його можна використовувати для виконання SQL-запитів та виконання інших операцій з базами даних
❄ Prepare the module before installation
  Підготуйте модуль перед встановленням

--------------------------------------------

𝐇𝐨𝐰 𝐝𝐨 𝐈 𝐮𝐬𝐞 in 𝐎𝐝𝐨𝐨?

The function is defined in the __init__ file
then in __manifest__ called using key 𝐩𝐫𝐞_𝐢𝐧𝐢𝐭_𝐡𝐨𝐨𝐤
Функція визначена у файлі __init__
то в __manifest__ викликається за допомогою ключа pre_init_hook

# __init__ file
def test_function(cr):
pass

# __manifest__ file
“pre_init_hook ”:”test_function”

--------------------------------------------

𝐒𝐨𝐦𝐞 𝐔𝐬𝐞 𝐂𝐚𝐬𝐞𝐬

☔ Checking the compatibility of the module with the current Odoo version. -> Перевірка сумісності модуля з актуальною версією Odoo.
☔ Creating or modifying database tables and fields. -> Створення або модифікація таблиць і полів бази даних.
☔ Initializing the module's data. -> Ініціалізація даних модуля.

---------------------------------------------------------------------------------------------------------------------------------------------
27. 𝐇𝐨𝐰 𝐭𝐨 𝐟𝐞𝐭𝐜𝐡 𝐟𝐢𝐥𝐞𝐬 𝐢𝐧 𝐌𝐨𝐝𝐮𝐥𝐞 𝐚𝐧𝐝 𝐫𝐞𝐚𝐝 𝐭𝐡𝐞𝐦, 𝐥𝐢𝐤𝐞 𝐚𝐬 𝐫𝐞𝐚𝐝𝐢𝐧𝐠 𝐚𝐧 𝐢𝐦𝐚𝐠𝐞, 𝐚 𝐭𝐱𝐭 𝐟𝐢𝐥𝐞, 𝐨𝐫 𝐚𝐧𝐲 𝐨𝐭𝐡𝐞𝐫 𝐟𝐢𝐥𝐞
    Як отримати файли в модулі та прочитати їх, наприклад, як читати зображення, файл txt або будь-який інший файл

Suppose you need to read the contents of the 𝐭𝐞𝐬𝐭.𝐩𝐝𝐟 file located in hr_contract/static/src/demo for any reason.
Припустимо, вам з якоїсь причини потрібно прочитати вміст файлу test.pdf, що знаходиться в hr_contract/static/src/demo.

This file can be read by the 𝐠𝐞𝐭_𝐦𝐨𝐝𝐮𝐥𝐞_𝐫𝐞𝐬𝐨𝐮𝐫𝐜𝐞 function implemented in Odoo for this purpose.
Цей файл може бути прочитаний функцією get_module_resource, реалізованою в Odoo для цієї мети.

# import
from odoo.modules.module import get_module_resource

✅ file_path = get_module_resource('hr_contract’, 'static', 'src', ’demo’, 'test.pdf')

✅ file_path = get_module_resource('hr_contract’, 'static/src', ’demo’, 'test.pdf')

✅ file_path = get_module_resource('hr_contract’, 'static/src/demo', 'test.pdf')

𝐎𝐮𝐭𝐩𝐮𝐭
'/odoo/addons/hr_contract/static/src/demo/test.pdf'

All of the above will work because the second Param to the function is *args
Все вищесказане буде працювати, тому що другим параметром функції є *args

-------------------

𝐠𝐞𝐭_𝐦𝐨𝐝𝐮𝐥𝐞_𝐫𝐞𝐬𝐨𝐮𝐫𝐜𝐞 take below arguments

♠ module: module name
♠ list(str) args: resource path components within module

𝐑𝐞𝐭𝐮𝐫𝐧
- str (absolute path to the resource)

-------------------

𝐔𝐬𝐞 𝐂𝐚𝐬𝐞𝐬
🥁 add default image for field based on image defined in image file in module resource
   Додати зображення за замовчуванням для поля на основі зображення, визначеного у файлі зображення у ресурсі модуля
🥁 Read the contents of a file located in a "static" folder within my module's folder
   Зчитати вміст файлу, розташованого в "статичній" папці в папці мого модуля

---------------------------------------------------------------------------------------------------------------------------------------------
28. 𝐈𝐟 𝐏𝐃𝐅 𝐫𝐞𝐩𝐨𝐫𝐭𝐬 𝐚𝐫𝐞 𝐧𝐨𝐭 𝐩𝐫𝐢𝐧𝐭𝐢𝐧𝐠 𝐢𝐧 𝐭𝐡𝐞 𝐜𝐨𝐫𝐫𝐞𝐜𝐭 𝐟𝐨𝐫𝐦𝐚𝐭, 𝐲𝐨𝐮 𝐨𝐧𝐥𝐲 𝐧𝐞𝐞𝐝 𝐭𝐨

1. Enable debug mode

2. Navigate to the Settings>System Parameter menu and look for the key report.url

3. change value to your url (ex: localhost:8069)
If a key does not exist, you can create one.


🔅 But what is importance of 𝐭𝐡𝐢𝐬 𝐤𝐞𝐲 𝐢𝐧 𝐎𝐝𝐨𝐨 ?

Let's say you have an Odoo instance running on your local machine (http://localhost:8069)
and you have changed the value of the report.url key to be http://𝐦𝐲-𝐫𝐞𝐩𝐨𝐫𝐭-𝐬𝐞𝐫𝐯𝐞𝐫/
This means that reports will be generated from the report server, not current instance

This means that if you try to access for example, an invoice report from Odoo, it will be generated and served from the 𝐦𝐲-𝐫𝐞𝐩𝐨𝐫𝐭-𝐬𝐞𝐫𝐯𝐞𝐫 server


🎈 KEEP IN MIND

🌱 The new URL must point to a report server that has been configured to generate and serve the reports you require

🌱 Reduced load on the Odoo server: The Odoo server will no longer have to generate reports on its own, which can reduce the load on the server and improve its overall performance.

🌱 Increased flexibility: By changing the report.url key, you can use any report server that you want, including a third-party report server. This gives you more flexibility and control over the reporting process.

Later, I'll write a post regarding Odoo system parameters and how they might help you.

Якщо звіти у форматі PDF друкуються не в правильному форматі, потрібно лише

1. Увімкніть режим налагодження

2. Перейдіть до меню Налаштування>Системні параметри та знайдіть ключовий report.url

3. Змініть значення URL-адреси (наприклад: localhost:8069)
Якщо ключа не існує, його можна створити.

🔅 Але яке значення цього ключа в Odoo?

Припустимо, у вас є екземпляр Odoo, запущений на вашому локальному комп'ютері (http://localhost:8069)
і ви змінили значення ключа report.url, щоб він був http://my-report-server/
Це означає, що звіти будуть формуватися з сервера звітів, а не з поточного екземпляра

Це означає, що якщо ви спробуєте отримати, наприклад, доступ до звіту рахунків-фактур від Odoo, він буде згенерований і обслуговуватиметься з сервера my-report-server

🎈 МАЙТЕ НА УВАЗІ

🌱 Нова URL-адреса має вказувати на сервер звітів, настроєний для створення та показу потрібних звітів

🌱 Зменшення навантаження на сервер Odoo: Серверу Odoo більше не доведеться самостійно генерувати звіти, що може зменшити навантаження на сервер та покращити його загальну продуктивність.

🌱 Підвищена гнучкість: змінивши ключ report.url, ви можете використовувати будь-який сервер звітів, включаючи сторонній сервер звітів. Це дає вам більше гнучкості та контролю над процесом звітування.

---------------------------------------------------------------------------------------------------------------------------------------------
29. 𝐡𝐨𝐰 𝐝𝐨 𝐈 𝐦𝐚𝐤𝐞 𝐟𝐢𝐞𝐥𝐝𝐬 𝐞𝐝𝐢𝐭𝐚𝐛𝐥𝐞 𝐟𝐨𝐫 𝐬𝐩𝐞𝐜𝐢𝐟𝐢𝐜 𝐠𝐫𝐨𝐮𝐩𝐬 ? 📣

In certain levels of customization, we need to make some fields editable for only specific users in form view

For example, I want specific users to be able to change the birth date field on the employee form view

Let's say we have the following:

- form view already defined in system with ref called 𝐞𝐦𝐟𝐦
- field defined in form view (𝐞𝐦𝐟𝐦) called 𝐛𝐢𝐫𝐭𝐡𝐝𝐚𝐲
(visible and editable for all users)
- new group (res.groups) called 𝐠𝐫𝐨𝐮𝐩_𝐭𝐞𝐬𝐭

We only want users in 𝐠𝐫𝐨𝐮𝐩_𝐭𝐞𝐬𝐭 to be able to make changes to this field ?

make the below steps to solve this problem.

1️⃣ Make a new form called 𝐞𝐦𝐟𝐦_1 that inherits from 𝐞𝐦𝐟𝐦 and makes the birthday field read-only by setting it to "true"

2️⃣ Create a new form called 𝐞𝐦𝐟𝐦_2 that inherits from 𝐞𝐦𝐟𝐦_1 and make the birthday field read-only by setting it to “false”.

while define this form view, we'll add a new key called 𝐠𝐫𝐨𝐮𝐩𝐬_𝐢𝐝, like below

<field name="groups_id" eval="[(4, ref('new_module.group_test'))]" />

=====

Why 𝐠𝐫𝐨𝐮𝐩𝐬_𝐢𝐝 important here ?

𝐞𝐦𝐟𝐦_2 view override attribute called readonly exists in 𝐞𝐦𝐟𝐦_1 view, and in this case, odoo will check form view with who has access rights

You can also make a lot of changes. You can hide XML parts or change their attributes however you want. Odoo gives you many useful attributes to choose from, such as "invisible," "required," and so on.

=====
🌻 You can also make your own attributes from scratch if you want to, but that's a more difficult topic that we'll talk about later.

*** EDIT
This feature is not supported in 𝐎𝐝𝐨𝐨 𝐯16 but still works fine in old versions.

як зробити поля доступними для редагування для певних груп? 📣

На певних рівнях налаштування нам потрібно зробити деякі поля доступними для редагування лише для певних користувачів у вигляді форми

Наприклад, я хочу, щоб певні користувачі могли змінювати поле дати народження в поданні форми працівника

Припустимо, у нас є наступне:

- Вигляд форми вже визначено в системі з ref під назвою emfm
- Поле, визначене у вигляді форми (emfm) під назвою День народження
(видимий і редагований для всіх користувачів)
- Нова група (res.groups) під назвою group_test

Ми лише хочемо, щоб користувачі в group_test могли вносити зміни в це поле ?

Виконайте наведені нижче дії, щоб вирішити цю проблему.

1️⃣ Створіть нову форму під назвою emfm_1, яка успадковується від emfm і робить поле дня народження доступним лише для читання, встановивши для нього значення "true"

2️⃣ Створіть нову форму під назвою emfm_2, яка успадковується від emfm_1, і зробіть поле дня народження доступним лише для читання, встановивши для нього значення «false».

Визначаючи це подання форми, ми додамо новий ключ під назвою groups_id, як показано нижче

<field name="groups_id" eval="[(4, ref('new_module.group_test'))]" />

=====

Чому тут groups_id важливо?

emfm_2 атрибут view override під назвою readonly існує в emfm_1 представленні, і в цьому випадку Odoo перевірить вигляд форми з тим, хто має права доступу

Ви також можете внести багато змін. Ви можете приховати частини XML або змінити їх атрибути як завгодно. Odoo надає вам багато корисних атрибутів на вибір, таких як "невидимий", "обов'язковий" тощо.

=====
🌻 Ви також можете створити власні атрибути з нуля, якщо хочете, але це складніша тема, про яку ми поговоримо пізніше.

РЕДАГУВАТИ
Ця функція не підтримується в Odoo v16, але все ще нормально працює в старих версіях.

---------------------------------------------------------------------------------------------------------------------------------------------
30. 𝐟𝐥𝐨𝐚𝐭_𝐫𝐞𝐩𝐫(), a simple function available in Odoo Tools.

it is a simple function that takes a floating-point number and a precision value and returns a string representation of the float with the specified number of decimal places
Це проста функція, яка приймає число з плаваючою комою та значення точності та повертає рядкове представлення числа з плаваючою комою із вказаною кількістю знаків після коми

𝐏𝐚𝐫𝐚𝐦𝐬

- float val
- int precision_digits: number of fractional digits to include in the output
                        кількість дробових цифр для включення у вихідні дані

𝐑𝐞𝐭𝐮𝐫𝐧𝐬
str val

🔅 𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

# import
from odoo.tools import 𝐟𝐥𝐨𝐚𝐭_𝐫𝐞𝐩𝐫

➡ print(float_repr( 123.467 , 3))
Result: '123.467'

➡ print(float_repr( 123.467 , 2))
Result: '123.46'


🎯 Use Cases

1️⃣ Prices, for example, are commonly displayed with a specified number of decimal places in a sales order. To format the price as a string with the correct number of decimal places, use the 𝐟𝐥𝐨𝐚𝐭_𝐫𝐞𝐩𝐫 function.
    Ціни, наприклад, зазвичай відображаються із вказаною кількістю знаків після коми в замовленні на продаж. Щоб відформатувати ціну у вигляді рядка з правильною кількістю знаків після коми, використовуйте функцію float_repr.

2️⃣ When generating report , floating-point numbers may need to be formatted with a specific number of decimal places. The 𝐟𝐥𝐨𝐚𝐭_𝐫𝐞𝐩𝐫 function can be used to format the numbers as strings
    Під час створення звіту числа з плаваючою комою, можливо, доведеться відформатувати з певною кількістю знаків після коми. Функцію float_repr можна використовувати для форматування чисел як рядків


✨ Keep In Mind

The purpose of float_repr is not to round numbers. Instead, it is used to produce a suitable string representation for a float. Odoo gives you the float_round method to use if you need to round a floating-point number to a certain number of decimal places.
Мета float_repr полягає не в тому, щоб округлити числа. Натомість, він використовується для створення відповідного рядкового представлення для числа з плаваючою комою. Odoo надає вам float_round метод, який можна використовувати, якщо вам потрібно округлити число з плаваючою комою до певної кількості знаків після коми.

---------------------------------------------------------------------------------------------------------------------------------------------
31. 𝐟𝐥𝐨𝐚𝐭_𝐬𝐩𝐥𝐢𝐭_𝐬𝐭𝐫() 𝐟𝐮𝐧𝐜𝐭𝐢𝐨𝐧

This function is defined in the tools module of Odoo and is used to split a float number into two parts: the integer part and the decimal part.
Ця функція визначена в модулі інструментів Odoo і використовується для розділення числа з плаваючою точкою на дві частини: цілу частину та десяткову частину.

𝐏𝐚𝐫𝐚𝐦𝐬

- float val: value to split. (ex 1.432) -> значення для розділення. 
- int precision_digits: number of fractional digits to round to. -> кількість дробових цифр для округлення.

𝐑𝐞𝐭𝐮𝐫𝐧𝐬
tuple(str, str)


💥 𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

# import
from odoo.tools import float_split_str

➡ print(float_split_str(1.132, 2))
Result: ('1', '13')

➡ print(float_split_str(1.48, 1))
Result: ('1', '5')

➡ print(float_split_str(1.1, 3))
Result: ('1', '100')

➡ print(float_split_str(1.13, 0))
Result: ('1', '')

🌴 In case 𝐩𝐫𝐞𝐜𝐢𝐬𝐢𝐨𝐧_𝐝𝐢𝐠𝐢𝐭𝐬 is zero, an empty string is returned for
the decimal places.
Якщо precision_digits дорівнює нулю, буде повернуто порожній рядок для
знаки після коми.

🌴 Length of the string returned for decimal places will always
be equal to 𝐩𝐫𝐞𝐜𝐢𝐬𝐢𝐨𝐧_𝐝𝐢𝐠𝐢𝐭𝐬
Довжина рядка, повернутого для десяткових знаків, завжди буде
дорівнювати precision_digits

👉 This post serves as a reminder to always use built-in functions rather than building them from scratch.
Ця публікація служить нагадуванням про те, що завжди потрібно використовувати вбудовані функції, а не створювати їх з нуля.

Odoo has more built-in Python functions that will be talked about in later posts.

---------------------------------------------------------------------------------------------------------------------------------------------
32. float_is_zero() 

What does the *float_is_zero* function perform and how do you use it?

float_is_zero() is useful for checking if a float value is close to zero.
float_is_zero() корисний для перевірки, чи близьке значення з плаваючою точкою до нуля.

💠 Params

1- value (float): to be checked.

2- precision_digits(int): Number of fractional digits to round to.
default is None.
    кількість дробових цифр, до яких потрібно округлити.
типовим значенням є None.

3- precision_rounding(float): representing the minimum non-zero value at the desired precision (for example, 0.01 for a 2-digit precision).
default is None.
    представляє мінімальне ненульове значення з бажаною точністю (наприклад, 0,01 для 2-значної точності).
типовим значенням є None.


🔶 Return

True if the value is considered zero.
Else False.

💡 Examples

float_is_zero(0.001, precision_digits=2)
Result: True
--
float_is_zero(0.001, precision_digits=3)
Result: False
--
float_is_zero(0.001, precision_rounding=0.001)
Result: False

Parameters are forbidden
🐞 float_is_zero(0.0, precision_rounding= 0.0)
🐞 float_is_zero(0.0, precision_rounding= -0.1)

Reason: precision_rounding must be positive
Причина: precision_rounding має бути позитивним

---------------------------------------------------------------------------------------------------------------------------------------------
33. float_compare()

float_compare() is used to compare two floating-point numbers after rounding them to a given precision.
    використовується для порівняння двох чисел з плаваючою комою після округлення їх до заданої точності.

compares two floating-point numbers after rounding them to a specified precision. The precision can be defined in terms of the number of decimal digits or the minimum non-zero value at the desired precision.
Порівнює два числа з плаваючою комою, округливши їх до заданої точності. Точність може бути визначена в термінах кількості десяткових цифр або мінімального ненульового значення при бажаній точності.


🎯 Parameters
value1(float): First value to be checked
value2(float): Second value to be checked
precision_digits: Number of fractional digits to be checked .default is None. -> Кількість дробових цифр, які потрібно перевірити
precision_rounding: After the precision value is rounded .default is None. -> Після округлення значення точності


🎯 Return
0: If the first value is equal to the second value. -> Якщо перше значення дорівнює другому.
1: If the first value is greater than the second value. -> Якщо перше значення більше за друге.
-1: If the first value is less than the second value. -> Якщо перше значення менше за друге.


🎯 Examples
from odoo.tools import float_compare

val1 = 1.732 , val2 = 1.731

1- Compare the values after rounding to 2 decimal digits
    Порівняйте значення після округлення до 2 десяткових цифр

print(float_compare(val1,val2, precision_digits=2))
result : 0

2- Compare the values after rounding to 3 decimal digits
    Порівняйте значення після округлення до 3 десяткових цифр

print(float_compare(val1,val2,precision_digits=3))
result: 1

3- Compare the values after rounding to a minimum non-zero value of 0.01
    Порівняйте значення після округлення до мінімального ненульового значення 0,01

print(float_compare(val1,val2,precision_rounding=0.01))
result : 0

4- Compare the values after rounding to a minimum non-zero value of 0.001
    Порівняйте значення після округлення до мінімального ненульового значення 0,001

print(float_compare(val1,val2,precision_rounding=0.001))
result: 1

---------------------------------------------------------------------------------------------------------------------------------------------
34. 𝐚𝐮𝐭𝐨_𝐢𝐧𝐬𝐭𝐚𝐥𝐥 = True 🔅

It is key-defined in __manifest__.py file, which lets you choose if a module should be installed immediately when other modules that depend on it are installed.
Він визначається ключем у __manifest__.py файлі, що дозволяє вибрати, чи слід встановлювати модуль негайно, коли встановлюються інші модулі, які залежать від нього.

For example, if you have Module 𝐞𝐯𝐞𝐧𝐭_𝐬𝐚𝐥𝐞 has auto_install = True that depends on [ event , sale_management]

then when a user installs 𝐞𝐯𝐞𝐧𝐭 and 𝐬𝐚𝐥𝐞_𝐦𝐚𝐧𝐚𝐠𝐞𝐦𝐞𝐧𝐭 , Module 𝐞𝐯𝐞𝐧𝐭_𝐬𝐚𝐥𝐞 will be automatically installed as well.

if auto_install is false, the user will need to manually install Module event_sale


𝐌𝐚𝐧𝐢𝐟𝐞𝐬𝐭 ❗❓

it is simple file that allows you define basic information about the module, such as the module's name, version, description,Dependencies,Data Files, and author

will focus only on keys that are important and may be tricky.

---------------------------------------------------------------------------------------------------------------------------------------------
35. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : 𝐒𝐞𝐚𝐫𝐜𝐡()

The search() Method allows you to find records that match specific criteria
It enables you to search for 𝘳ecords in a model based on a particular domain
Метод search() дозволяє знаходити записи, які відповідають певним критеріям
Він дозволяє шукати записи в моделі на основі певного домену


𝐏𝐚𝐫𝐚𝐦𝐞𝐭𝐞𝐫𝐬:

1️⃣ 𝐝𝐨𝐦𝐚𝐢𝐧: a list of tuples that define the criteria that the records must match. 
Use an empty list to match all records
    список кортежів, які визначають критерії, яким повинні відповідати записи. 
2️⃣ 𝐨𝐟𝐟𝐬𝐞𝐭: number of results to ignore. 
    кількість результатів, які потрібно ігнорувати. 
3️⃣ 𝐥𝐢𝐦𝐢𝐭: maximum number of records to return. 
    максимальна кількість записів для повернення. 
4️⃣ 𝐨𝐫𝐝𝐞𝐫: A sort string, which specifies how the results should be sorted and returned.
    рядок сортування, який визначає, як слід сортувати та повертати результати.

𝐑𝐞𝐭𝐮𝐫𝐧𝐬: list of records that satisfy the given domain.
:𝐫𝐚𝐢𝐬𝐞 𝐀𝐜𝐜𝐞𝐬𝐬𝐄𝐫𝐫𝐨𝐫: if user is not allowed to access requested information

Повертає: список записів, які задовольняють заданому домену.
:raise AccessError: якщо користувачеві не дозволено доступ до запитуваної інформації

𝐄𝐱𝐚𝐦𝐩𝐥𝐞
partners = self.env['res.partner'].search(
[('name', 'like', 'Mohamed')],limit=3, offset=1, order='date asc')


You can also specify multiple fields in the 𝐨𝐫𝐝𝐞𝐫 string, like below:
Ви також можете вказати кілька полів у рядку замовлення, як показано нижче:
order="𝐧𝐚𝐦𝐞 asc, 𝐝𝐚𝐭𝐞 desc"

👾 raise AccessError ?
It occurs when a user tries to perform an operation that they are not authorized to perform, such as when the user does not have the appropriate permissions for the model or record.
Це відбувається, коли користувач намагається виконати операцію, на яку він не уповноважений, наприклад, коли користувач не має відповідних дозволів на модель або запис.

--------------------------------------------------------------------------------------------------------------------------------------------
36. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : 𝐬𝐞𝐚𝐫𝐜𝐡_𝐜𝐨𝐮𝐧𝐭()

Getting the number of records in your model that match a specific domain
Отримання кількості записів у вашій моделі, які відповідають певному домену

𝐏𝐚𝐫𝐚𝐦𝐞𝐭𝐞𝐫𝐬:

1️⃣ 𝐝𝐨𝐦𝐚𝐢𝐧: a list of tuples that define the criteria that the records must match.
           список кортежів, які визначають критерії, яким повинні відповідати записи.
Use an empty list to match all records
Використання пустого списку, щоб зіставити всі записи

2️⃣ 𝐥𝐢𝐦𝐢𝐭: An optional parameter specifying the maximum number of records to count.
          необов'язковий параметр, що визначає максимальну кількість записів для підрахунку.

𝐑𝐞𝐭𝐮𝐫𝐧𝐬: Integer

𝐄𝐱𝐚𝐦𝐩𝐥𝐞
self.env['sale.order'].search_count(
[('create_date', '>=', fields.Datetime.today())])

# Result : {int} 5


🔶 𝐬𝐞𝐚𝐫𝐜𝐡_𝐜𝐨𝐮𝐧𝐭 Method should be used instead of the 𝐬𝐞𝐚𝐫𝐜𝐡 Method when you only need
 to count the number of records , without retrieving and counting the actual records.
 This improves database load efficiency.

 Метод слід використовувати замість пошукового методу, коли потрібно тільки порахувати
 кількість записів, не витягуючи і не підраховуючи фактичні записи.
 Це підвищує ефективність завантаження бази даних.

 --------------------------------------------------------------------------------------------------------------------------------------------
 37. 𝐞𝐱𝐩𝐫𝐞𝐬𝐬𝐢𝐨𝐧 𝐌𝐨𝐝𝐮𝐥𝐞 🎯

The Expression module is responsible for compiling domain expressions into SQL queries.
Модуль Expression відповідає за компіляцію виразів предметної області в SQL-запити.

This post will be about the AND() and OR() methods defined in this module and how to use them.
У цій публікації мова піде про методи AND() та OR(), визначені в цьому модулі, та про те, як їх використовувати.

𝐀𝐍𝐃() method takes a list of domains and returns a single domain that represents the conjunction of all the input domains.
Метод AND() приймає список доменів і повертає один домен, який представляє кон'юнкцію всіх вхідних доменів.

𝐎𝐑() method works like AND(), but it returns a single domain that represents any 𝐨𝐟 𝐭𝐡𝐞 𝐜𝐨𝐧𝐝𝐢𝐭𝐢𝐨𝐧𝐬 𝐭𝐡𝐚𝐭 𝐰𝐞𝐫𝐞 𝐠𝐢𝐯𝐞𝐧.
Метод OR() працює як AND(), але він повертає один домен, який представляє будь-яку з заданих умов.

Examples 🔻🔻

# import expression
from odoo.osv import expression

domain_1 = [('user_id', '=', False)]
domain_2 = [('stage_id', '=', False)]

final_domain_and = expression.AND(domain_1 ,domain_2)
# res: ['&', ('user_id', '=', false), (stage_id', '=', False)]

final_domain_or = expression.OR(domain_1 ,domain_2)
# res: ['|', ('user_id', '=', false), (stage_id', '=', False)]

𝐖𝐡𝐲 𝐢𝐦𝐩𝐨𝐫𝐭𝐚𝐧𝐭 🔥

🔻 allow you to combine multiple domains to create complex search criteria
🔻 дозволяють об'єднувати кілька доменів для створення складних критеріїв пошуку

🔻 Make your code more clean and readable
🔻 Зробіть свій код більш чистим і читабельним

 --------------------------------------------------------------------------------------------------------------------------------------------
38. 📚 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : search_read()

It combines the functionality of the 𝐬𝐞𝐚𝐫𝐜𝐡 and 𝐫𝐞𝐚𝐝 functions
allowing you to perform a search and then read the selected records in one step

Він поєднує в собі функціонал функцій пошуку і читання
що дозволяє виконати пошук, а потім прочитати вибрані записи за один крок

𝐏𝐚𝐫𝐚𝐦𝐬

1️⃣ domain: A search domain. -> Домен пошуку.
2️⃣ fields: A list of fields to read from the resulting records -> список полів для читання з отриманих записів
3️⃣ offset: The number of records to ignore. -> кількість записів, які потрібно ігнорувати.
4️⃣ limit: The maximum number of records to return. -> максимальна кількість записів для повернення.
5️⃣ order: Columns to sort result. -> Стовпці для сортування результатів.
6️⃣ read_kwargs: Additional keyword arguments to be passed to the read() method -> Додаткові аргументи ключових слів, які передаються в метод read()

𝐑𝐞𝐭𝐮𝐫𝐧
returns a list of dictionaries, where each dictionary represents a single record
Повертає список словників, де кожен словник представляє один запис

👾 𝐡𝐨𝐰 𝐢𝐭 𝐢𝐬 𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐭 ?!

- avoids the need to make multiple separate calls to the database
- дозволяє уникнути необхідності здійснювати кілька окремих звернень до бази даних
- allows you to filter the results of a search based on specific fields
- дозволяє фільтрувати результати пошуку за певними полями

👾 𝐟𝐨𝐫 𝐌𝐨𝐫𝐞 𝐞𝐟𝐟𝐢𝐜𝐢𝐞𝐧𝐜𝐲

- Ensure that you include only the necessary 𝐟𝐢𝐞𝐥𝐝𝐬 while reading,
as the default is to retrieve all fields if no field added.
- Переконайтеся, що ви включаєте лише необхідні поля під час читання,
За замовчуванням можна отримати всі поля, якщо не додано жодного поля.

- use the offset and limit arguments to paginate the results
- використовуйте аргументи offset і limit, щоб розбити результати на сторінки

This can be useful for fetching large amounts of data without overloading the
server
Це може бути корисним для отримання великих обсягів даних без перевантаження
сервера

 --------------------------------------------------------------------------------------------------------------------------------------------
39. auto_delete in odoo mail.template model

what is (auto_delete) property in odoo mail.template model :
In Odoo, there is indeed an auto_delete property available for the mail.template model, which is used for email templates.
В Odoo дійсно є властивість auto_delete, доступна для моделі mail.template, яка використовується для шаблонів листів.

The auto_delete property in the mail.template model controls the automatic deletion behavior of email records generated from the template.
Властивість auto_delete у моделі mail.template керує поведінкою автоматичного видалення записів електронної пошти, створених на основі шаблону.

To set the auto_delete property to True for an email template, you can include it in the XML definition of the mail.template record:
Щоб установити для властивості auto_delete значення True для шаблону листа, ви можете включити її у визначення XML запису mail.template:

<record id="my_email_template" model="mail.template">
 <field name="name">My Email Template</field>
 <field name="model_id" ref="model_my_model"/>
 <!-- Other fields of the email template -->
 <field name="auto_delete" eval="True"/>
</record>

In the example above, the auto_delete property is set to True for the mail.template record with the ID my_email_template.
This means that email records generated from this template will be automatically deleted after they have been sent.
У наведеному вище прикладі для ресурсу auto_delete встановлено значення True для запису mail.template із my_email_template ідентифікатора.
Це означає, що записи електронної пошти, створені за допомогою цього шаблону, будуть автоматично видалені після їх надсилання.

for the same previous meaning you can using it in python file like :
Для того ж попереднього значення ви можете використовувати його у файлі Python, наприклад:

self.env['mail.template'].create({
 'name': 'Test template', # name hardcoded for test -> ім'я жорстко закодоване для тесту
 'partner_to': '${object.id}',
 'lang': '${object.lang}',
 'auto_delete': True,
 'model_id': self.ref('base.model_name'),
 })

in this example the record of email.template will be deleted after sending email .
У цьому прикладі запис email.template буде видалено після надсилання електронної пошти .

Please note that the auto_delete property affects the behavior of email records generated from the template, not the template itself.
The template record will remain in the database even if the email records generated from it are deleted.
Зверніть увагу, що властивість auto_delete впливає на поведінку записів електронної пошти, згенерованих із шаблону, а не на сам шаблон.
Шаблонний запис залишиться в базі даних, навіть якщо записи електронної пошти, створені з нього, будуть видалені.

--------------------------------------------------------------------------------------------------------------------------------------------

