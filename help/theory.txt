Contents:
----------------------------------------------------------------------------------------------------------------------------------------------

1. ORM Methods: 𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬() Function
2. ORM Methods: 𝐮𝐬𝐞𝐫_𝐡𝐚𝐬_𝐠𝐫𝐨𝐮𝐩𝐬 Function
3. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: default_get Function
4. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: Sorted Function
5. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: 𝐅𝐢𝐥𝐭𝐞𝐫𝐞𝐝 Function
6. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: 𝐌𝐚𝐩𝐩𝐞𝐝 Function
7. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: Create
8. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: Read
9. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: Write
10. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: name_create
11. Методи ORM: name_get
12. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬: Unlink
13. How do I execute a SQL 𝐪𝐮𝐞𝐫𝐲 inside an Odoo module?
14. Str2bool(value)
15. 𝐀𝐝𝐝(value, *args, **kwargs) function
16. 𝐞𝐧𝐝_𝐨𝐟 function
17. 𝐒𝐭𝐚𝐫𝐭_𝐨𝐟 function in Odoo
18. Model.with_env
19. Model.sudo()


----------------------------------------------------------------------------------------------------------------------------------------------
1. ORM Methods : 𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬() Function

It is a helper function that can be used to verify that the current user is allowed to perform a given operation, like writing to a model.
Це допоміжна функція, яку можна використовувати для перевірки того, що поточному користувачеві дозволено виконувати задану операцію, наприклад, запис до моделі.

𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬
⚒ operation : create, read, write, or unlink
⚒ raise_exception: A boolean value that indicates whether an exception should be raised if the operation is forbidden.


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

self.with_user(4).env['account.move.line'].
𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬('read', raise_exception=False)
# 𝐓𝐫𝐮𝐞 or 𝐅𝐚𝐥𝐬𝐞 depends on security applied to the user

self.with_user(4).env['account.move.line'].
𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬('read',raise_exception=True)
# in case there are no access rights for this user,
# you will get 𝐞𝐱𝐜𝐞𝐩𝐭𝐢𝐨𝐧 like below
# You are not allowed to access 'Journal Item' (account.move.line) records


💡 What is the expected Exception if no access rights are granted ?
IF operation == read
# {AccessError} You are not allowed to access...
IF operation == create
# {AccessError} You are not allowed to create...
IF operation == delete
# {AccessError} You are not allowed to delete...
IF operation == write
# {AccessError} You are not allowed to modify...

Feel free to let me know if you need more information about when or how to use this function.

----------------------------------------------------------------------------------------------------------------------------------------------
2. ORM Methods : 𝐮𝐬𝐞𝐫_𝐡𝐚𝐬_𝐠𝐫𝐨𝐮𝐩𝐬 Function

The user_has_groups function is a model method that can be used to check
if the user is a member of at least one of the groups
specified in the groups passed.
Функція user_has_groups є модельним методом, який може бути використаний для перевірки
якщо користувач є учасником хоча б однієї з груп
зазначена в пройдених групах.

🌀  𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬
groups : comma-separated list of fully-qualified group external IDs

🌀  𝐑𝐞𝐭𝐮𝐫𝐧
True if the current user is a member of one of the groups in groups
else False

🌀  𝐄𝐱𝐚𝐦𝐩𝐥𝐞
groups = 'base.group_no_one, base.group_admin'
has_groups = self.𝐮𝐬𝐞𝐫_𝐡𝐚𝐬_𝐠𝐫𝐨𝐮𝐩𝐬(groups)
# True or False depend on groups assigned to the user

----------------------------------------------------------------------------------------------------------------------------------------------
3. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : default_get Function ☔

default_get() method can be used to get a list of fields' default values.

It takes a list of field names as input and gives back a dictionary
that maps field names to their default values.

Метод default_get() можна використовувати для отримання списку значень полів за замовчуванням.

Він приймає список назв полів як вхідні дані та повертає словник
, який зіставляє імена полів зі значеннями за замовчуванням.

🐟 # get a list of fields' default values
fields = ['𝐜𝐨𝐦𝐩𝐚𝐧𝐲_𝐢𝐝', '𝐬𝐭𝐚𝐭𝐞', '𝐝𝐚𝐭𝐞_𝐟𝐫𝐨𝐦']
self.env['hr.payslip'].default_get(fields)

# Result:
{'𝐜𝐨𝐦𝐩𝐚𝐧𝐲_𝐢𝐝': 1, '𝐝𝐚𝐭𝐞_𝐟𝐫𝐨𝐦': 2023-10-01, '𝐬𝐭𝐚𝐭𝐞': 'draft'}


🔽 The following determines the default values:

↪ From the field itself: If the field has a default value,
that value is used.

↪ From the context

↪ If there is a record for the field in the 𝐢𝐫.𝐝𝐞𝐟𝐚𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞,
The value of that record is used as the field's default value(s).

↪ From the parent model: If the field is inherited from a parent model, the default_get() function is called on the parent model to get the default value for the field.


🐟 # Update default value for field
@api.model
def default_get(self, fields_list):
x = super(MyModel, self).default_get(fields_list)
x['country_id'] = self.env.context.get('country_id')
return x

The default_get() function can be used to

🔆 save you time while creating new record
🔆 Improved user experience
🔆 Reduced errors when user entering data from form view
🔆 Increased efficiency: users can create new records more quickly and easily.

----------------------------------------------------------------------------------------------------------------------------------------------
4. 📚 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : Sorted Function

The sorted() function is a powerful function for ordering records.
It is possible to sort records using any field or even a custom function.

# Sort the records from oldest to newest by ID.
env['sale.order'].search([]).sorted(key='id')

The sorted() method takes three arguments  
♦ 𝘴𝘦𝘭𝘧 : The recordset that you want to

♦ key: A function or field name that is used to determine the sorting order.

♦ reverse: A boolean value that indicates whether the records should be sorted in reverse order


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

🐟 # Sort the records from 𝐨𝐥𝐝𝐞𝐬𝐭 to 𝐧𝐞𝐰𝐞𝐬𝐭
by create date.
env['sale.order'].search([]).
𝐬𝐨𝐫𝐭𝐞𝐝(key='create_date').
mapped('create_date')
# [ (2023, 10, 01), (2023, 10, 02), (2023, 10, 03)]


🐟 # Sort the records from 𝐧𝐞𝐰𝐞𝐬𝐭 to 𝐨𝐥𝐝𝐞𝐬𝐭
by create date.
env['sale.order'].search([]).
𝐬𝐨𝐫𝐭𝐞𝐝(key='create_date', 𝐫𝐞𝐯𝐞𝐫𝐬𝐞=𝐓𝐫𝐮𝐞).
mapped('create_date')

# [ (2023, 10, 03), (2023, 10, 02), (2023, 10, 01)]


🐟 # Sort the records using multiple fields
env['sale.order'].search([]).
𝐬𝐨𝐫𝐭𝐞𝐝(key=lambda x: (𝐱.𝐧𝐚𝐦𝐞, 𝐱.𝐩𝐚𝐫𝐭𝐧𝐞𝐫_𝐢𝐝, 𝐱.𝐜𝐫𝐞𝐚𝐭𝐞_𝐝𝐚𝐭𝐞))

# sale.order(1, 2, 3, 4)

----------------------------------------------------------------------------------------------------------------------------------------------
5. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : 𝐅𝐢𝐥𝐭𝐞𝐫𝐞𝐝 Function ☔

filtered() is a powerful function that allows you to filter records based on a given criteria. This can be useful for a variety of tasks, such as:

Only processing records that meet certain conditions. For example, you might want to only process records that have a certain status.

The filtered() function takes two arguments:

♦ 𝘴𝘦𝘭𝘧 :  The recordset that you want to filter.
♦ 𝘧𝘶𝘯𝘤 : A function or a dot-separated sequence of field names

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

# Only keep records of whose user is the current user.
⏩ records.filtered(lambda r: r.user_id == user.id)

# Only keep records that have a status of "done".
⏩ records.filtered("state == 'done'")

# Only keep records of whose partner is a company.
⏩ records.filtered("partner_id.is_company")

The filtered() function is very efficient and can be used
to filter large recordsets quickly

----------------------------------------------------------------------------------------------------------------------------------------------
6. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : 𝐌𝐚𝐩𝐩𝐞𝐝 Function ☔

mapped() is quite important in code optimization
It avoids loops that have been defined by the user.
It gives you a list of field values. Its argument accepts a string value as the column name and returns all the possible values from the recordset.

The mapped() function takes two arguments:

𝐬𝐞𝐥𝐟: The recordset to which the function will be applied.
𝐟𝐮𝐧𝐜: A function or a field name sequence separated by a dot.


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

🌀 self.env['res.partner'].search([]).𝐦𝐚𝐩𝐩𝐞𝐝('email')
# ['test1@yourcompany', 'test2@agrolait', 'test3@example']

🌀 records.𝐦𝐚𝐩𝐩𝐞𝐝(lambda r: r.field1 + r.field2)
# loop every record and sum two fields

🌀 self.env['sale.order'].search([]).
𝐦𝐚𝐩𝐩𝐞𝐝('order_line.product_uom_qty')
# [3.0, 3.0, 2.0, 4.0, 6.0]
# Return quantity from each order line from order_line for each sale order


𝐓𝐡𝐞 𝐦𝐚𝐩𝐩𝐞𝐝() function can be used to implement a variety of different data transformations, such as:

❄ Calculating new fields
❄ Filtering records
❄ Converting recordsets to different formats
❄ Joining recordsets

----------------------------------------------------------------------------------------------------------------------------------------------
7. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : Create 📚

It is used to create new records for a given model. It takes a 𝐥𝐢𝐬𝐭 𝐨𝐟 𝐝𝐢𝐜𝐭𝐢𝐨𝐧𝐚𝐫𝐢𝐞𝐬 as input, where each dictionary represents the values for the fields of the new record.

𝐑𝐞𝐭𝐮𝐫𝐧:  a list of the created records.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞

self.env['res.partner'].create(
[
{'name': 'test1'},
{'name': 'test2'}
])
# Result : res.partner(7, 8)


𝐃𝐞𝐜𝐨𝐫𝐚𝐭𝐞𝐝 𝐰𝐢𝐭𝐡 🔽

1️⃣ The @api.model_create_multi decorator : indicates that the function can be used to create multiple records at once.
2️⃣ The @api.returns() decorator : indicates that the function returns a list of records.

🔆 If you don't know what a 𝐝𝐞𝐜𝐨𝐫𝐚𝐭𝐨𝐫 is or how work don't worry,
we'll talk about that in more detail in the post about how to make your own decorator.

🔆 The create method first checks if the user has permission
to create records of the specified model.
If the user does not have permission, an AccessError is raised.

----------------------------------------------------------------------------------------------------------------------------------------------
8. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 :Read 📚

it allows you to read data from the database.
It 𝐭𝐚𝐤𝐞𝐬 𝐚 𝐥𝐢𝐬𝐭 𝐨𝐟 𝐟𝐢𝐞𝐥𝐝𝐬 𝐚𝐬 𝐢𝐧𝐩𝐮𝐭 and returns a list of dictionaries mapping field

it takes param called 𝐟𝐢𝐞𝐥𝐝𝐬 : This parameter specifies which
fields you want to read from the database.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞

fields = ['name', 'email']
res = self.env['res.partner'].browse( (7,8) ).read(fields)

Result
# [
# {'email': 'mark.brown23@example', 'id': 7, 'name': 'Marc Demo'},
# {'email': 'joel.willis63@example', 'id': 8, 'name': 'Joel Willis'}
# ]

💡 IF you do not specify any fields the read function will return
all fields for the record.


- How work ?

works by first fetching the stored fields from the database to the cache. 
Stored fields are fields that are stored in the database

- Why important ?

- Send data to Another system (Integration)
- Display data in a list view or form view
- Export data to a file

----------------------------------------------------------------------------------------------------------------------------------------------
9. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : Write 📚

write() function is a used for updating records. 
It allows you to update multiple fields on multiple records at once 
and it handles all of the necessary validation and security checks for you.

𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬:

1️⃣ self: This is the record or set of records that you want to write.
2️⃣ vals: This is a dictionary of field names and values.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

🔰# update multi records
orders= self.env['sale.order'].browse((6, 7))
orders.write({'state': 'to_cancel'})

🔰 # update one record
self.user_admin = self.env.ref('base.user_admin')
self.user_admin.write({'name': 'Zahra'})


↪ raise 𝐀𝐜𝐜𝐞𝐬𝐬𝐄𝐫𝐫𝐨𝐫: if user is not allowed to modify the specified records/fields

----------------------------------------------------------------------------------------------------------------------------------------------
10. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : name_create 📚

convenient way to create a new record by providing only the display name (𝐫𝐞𝐜_𝐧𝐚𝐦𝐞).

The name_create() method will initialize the new record with any default values applicable to the model or provided through the context.

𝐚𝐫𝐠𝐮𝐦𝐞𝐧𝐭: the display name of the new record
𝐫𝐞𝐭𝐮𝐫𝐧 : name_get for the record

𝐄𝐱𝐚𝐦𝐩𝐥𝐞

self.env['res.partner'].name_create('Test1')
# Output : (1, 'Test 1')

⏩ The usual behavior of create() applies, such as checking access rights.

⏩ useful method for creating new records quickly and easily then handle more data later on

🔰 What happens if you call this method on a model that doesn't have a rec_name?
Return 𝐅𝐚𝐥𝐬𝐞 and in log, we have below warning
"""Cannot execute name_create, no _rec_name defined..."""

Don't worry if you have trouble with 𝐫𝐞𝐜_𝐧𝐚𝐦𝐞; we'll look into it more when we talk about class attributes that Odoo provide

----------------------------------------------------------------------------------------------------------------------------------------------
11. Методи ORM : name_get 📚

Метод name_get(), визначений у базовій моделі, дозволяє налаштувати спосіб відображення записів.

За замовчуванням функція name_get() просто повертає значення поля rec_name. Однак цю функцію можна перевизначити, щоб створити власну логіку відображення записів.

Приклад 🔰

Можливо, потрібно відобразити назву замовлення на продаж разом із іменем партнера для записів, які відображаються в режимі зв'язку

def name_get(self):
    результат = []
    Для запису в себе:
      result.append((record.id, "%s (%s)" %
(record.name, record.partner_id.ім'я)))
    Результат повернення

Чому важливо? 🔰

За допомогою функції name_get() можна відобразити додаткову інформацію про кожен запис, наприклад електронну пошту та стан клієнта або вартість продукту

Це може зробити ваші списки та розкривні меню простішими для розуміння та більш читабельними.

----------------------------------------------------------------------------------------------------------------------------------------------
12. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : Unlink 📚

It is a simple method used for deleting records from the database.
There is no way to undo the deletion once you have executed it.
Це простий метод, який використовується для видалення записів з бази даних.
Неможливо скасувати видалення після його виконання.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞 🔰

cancel_orders= env['sale.order'].search([('state', '=', 'cancel')])
cancel_orders.𝐮𝐧𝐥𝐢𝐧𝐤()
# Return True

𝐇𝐨𝐰 𝐰𝐨𝐫𝐤 ?

➡ Checking access rights to ensure that the user is allowed to delete the records
➡ Deleting any attachments associated with the records
➡ Invalidating the entire cache
➡ Deleting the records' properties

Як працюють ?

➡ Перевірка прав доступу, щоб переконатися, що користувачеві дозволено видаляти записи
➡ Видалення вкладень, пов'язаних із записами
➡ Визнання недійсним усього кешу
➡ Видалення властивостей записів

----------------------------------------------------------------------------------------------------------------------------------------------
13. How do I execute a SQL 𝐪𝐮𝐞𝐫𝐲 inside an Odoo module? 👾

1️⃣ 𝐜𝐫 = 𝐬𝐞𝐥𝐟.𝐞𝐧𝐯.𝐜𝐫
You can use the self.env.cr object. This object provides a direct connection
to the database.
Можна використовувати об'єкт self.env.cr. Цей об'єкт забезпечує пряме з'єднання
в базу даних.

2️⃣ 𝐜𝐫.𝐞𝐱𝐞𝐜𝐮𝐭𝐞() 
Use the cr.execute() method to execute the query.
You can pass in the query as a string or as a variable containing the query
Використовуйте метод cr.execute() для виконання запиту.
У запиті можна передати рядок або змінну, що містить запит

3️⃣ 𝐜𝐫.𝐟𝐞𝐭𝐜𝐡𝐚𝐥𝐥()
Use the cr.fetchall() method to fetch the results of the query.
This will return a list of tuples, where each tuple represents
a row in the result set.
Використовуйте метод cr.fetchall() для отримання результатів запиту.
Це поверне список кортежів, де кожен кортеж представляє
рядок у наборі результатів.

4️⃣ 𝐃𝐨 𝐬𝐨𝐦𝐞𝐭𝐡𝐢𝐧𝐠 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐫𝐞𝐬𝐮𝐥𝐭𝐬

Example 🎲

cr = self.env.cr

# Execute the query
cr.execute(""" SELECT id ,name,email
FROM res_partner
WHERE id in %s
""", (((1, 2)),))

res = cr.fetchall()

# Do something with the results
res_data = { id: (name, email) for id, name, email in res }

# Result
# {
# 1: ('My Company (San Francisco)', info@yourcompany'),
# 2: ('OdooBot', 'odoobot@example')
# }

----------------------------------------------------------------------------------------------------------------------------------------------
14. Str2bool(value) 🚀

Sometimes, when we're working in Odoo, we need to change the return result to a bool. To do this, you can import a simple function called str2bool.

takes a string as input and converts it to a boolean value.

Іноді, коли ми працюємо в Odoo, нам потрібно змінити результат повернення на булеве значення. Для цього можна імпортувати просту функцію під назвою str2bool.

приймає рядок як вхідні дані та перетворює його на логічне значення.

➖➖➖

𝐏𝐚𝐫𝐚𝐦𝐬
value (str)

𝐑𝐞𝐭𝐮𝐫𝐧 
The boolean value is True if the string is one of the following: 
"y", "yes", "1", "true", "t", or "on".

The boolean value is False if the string is one of the following:
"n", "no", "0", "false", "f", or "off".

If the string is not in any of the above lists,
The function raises a ValueError exception.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

❇️ str2bool('yes')
>>> True

❇️ str2bool('off')
>>> False

❇️ str2bool(‘foo’)
>>> Exception from type {ValueError}

----------------------------------------------------------------------------------------------------------------------------------------------
15. 𝐀𝐝𝐝(value, *args, **kwargs) function

The add function defined in date utils Package can be used to add days, weeks, and months to a date / datetime
Функція add, визначена в date utils Package, може бути використана для додавання днів, тижнів і місяців до дати / datetime

𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬

- 𝐯𝐚𝐥𝐮𝐞: This is the initial date or datetime that you want
to add the relativedelta to.

- *𝐚𝐫𝐠𝐬: A variable number of positional arguments explicitly passed to the relativedelta() class.

- **𝐤𝐰𝐚𝐫𝐠𝐬: This is a dictionary of keyword arguments sent straight to the relativedelta() class.

Аргументи

- value: це початкова дата або дата, яку ви хочете
, щоб додати відносну дельту до.

- *args: Змінна кількість позиційних аргументів, явно переданих класу relativedelta().

- **kwargs: Це словник аргументів ключових слів, що надсилаються безпосередньо до класу relativedelta().

𝐑𝐞𝐭𝐮𝐫𝐧: date/datetime

-------------

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬 📢

# import
from datetime import 𝐝𝐚𝐭𝐞
from odoo.tools.date_utils import 𝐚𝐝𝐝

>>> add(date(2023,8, 7), days=1)
2023-08-08

>>> add(date(2023,8, 7), weeks=1)
2023-08-14

>>> add(date(2023,8, 7), months=1)
2023-09-07

>>> add(date(2023,8, 7), years=1)
2024-08-07

The below expression is used to add days, months, and years together.
>>> add(date(2023, 8, 7), days = 1, months = 1, years = 1)
2024-09-08

----------------------------------------------------------------------------------------------------------------------------------------------
16. 𝐞𝐧𝐝_𝐨𝐟 function 💡

𝐞𝐧𝐝_𝐨𝐟 is a built-in function in Odoo that can be used to get the end of a time period.
end_of - це вбудована функція в Odoo, яку можна використовувати для отримання кінця періоду часу.

The time period can be specified by a string
such as “hour”,"day", "week", or "month"
Період часу може бути вказано рядком
Наприклад, "година", "день", "тиждень" або "місяць"

This function takes two arguments:
Ця функція приймає два аргументи:

1️⃣ 𝐯𝐚𝐥𝐮𝐞: A date or datetime object.
2️⃣ 𝐠𝐫𝐚𝐧𝐮𝐥𝐚𝐫𝐢𝐭𝐲: The allowed values are
year, quarter, month, week, day, and hour

1️⃣ value: об'єкт date або datetime.
2️⃣ деталізація: допустимі значення
рік, квартал, місяць, тиждень, день і година

𝐑𝐞𝐭𝐮𝐫𝐧
a date/datetime object corresponding to the end of the specified period.
об'єкт date/datetime, що відповідає закінченню вказаного періоду.


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬 📢

# import
from datetime import date, datetime
from odoo.tools.date_utils import end_of


# get end of year
>>> end_of(date(2023, 9, 12), "year")
2023-12-31

# get end of month
>>> end_of(date(2023, 9, 12), "month")
2023-09-30

# get end of week
>>> end_of(date(2023, 9, 12), "week")
2023-09-17

# get end of hour
>>> end_of(datetime(2023, 9, 12, 14, 10), "hour")
2023-09-12 14:59:59.999999

-------------

in case you need to know the start of time period, check below

----------------------------------------------------------------------------------------------------------------------------------------------
17. 𝐒𝐭𝐚𝐫𝐭_𝐨𝐟 function in Odoo 💡

The start_of is a built-in function in Odoo that can be used to get the start of a time period.
start_of - це вбудована функція в Odoo, яку можна використовувати для отримання початку періоду часу.

The time period can be specified by a string
such as “hour”,"day", "week", or "month"
Період часу може бути вказано рядком
Наприклад, "година", "день", "тиждень" або "місяць"


This function takes two arguments:
Ця функція приймає два аргументи:

1️⃣ 𝐯𝐚𝐥𝐮𝐞: A date or datetime object.
2️⃣ 𝐠𝐫𝐚𝐧𝐮𝐥𝐚𝐫𝐢𝐭𝐲: The allowed values are
year, quarter, month, week, day, and hour.

1️⃣ value: об'єкт date або datetime.
2️⃣ деталізація: допустимі значення
рік, квартал, місяць, тиждень, день і година.

𝐑𝐞𝐭𝐮𝐫𝐧
a date/datetime object corresponding to the start of the specified period.
об'єкт date/datetime, що відповідає початку вказаного періоду.

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬 💥

# import
from datetime import datetime
from odoo.tools.date_utils import 𝐬𝐭𝐚𝐫𝐭_𝐨𝐟

# get the start of year
>>> start_of(datetime(2023, 8, 31), "year")
2023-01-01 00:00:00

# get the start of month
>>> start_of(datetime(2023, 8, 31), "month")
2023-08-01 00:00:00

# get the start of week
>>> start_of(datetime(2023, 8, 31), "week")
2023-08-28 00:00:00

# get the start of hour
>>> start_of(datetime(2023, 8, 31, 14, 55), "hour")
2023-08-31 14:00:00

----------------------------------------------------------------------------------------------------------------------------------------------
18. Model.with_env 🚀

The with_env() method temporarily changes the environment of the current model to the new environment.
Метод with_env() тимчасово змінює оточення поточної моделі на нове середовище.

This can be useful for testing code in different contexts or accessing data that is not normally accessible in the current environment.
Це може бути корисним для тестування коду в різних контекстах або доступу до даних, які зазвичай недоступні в поточному середовищі.

Return a new version of this recordset attached to the provided environment
Повертає нову версію цього набору записів, долучену до наданого середовища

𝐇𝐨𝐰 𝐭𝐨 𝐮𝐬𝐞 ❓

To use the with_env() method, you first need to create a new environment object. You can do this by passing the current environment to the with_env() method.
Щоб використовувати метод with_env(), спочатку потрібно створити новий об'єкт середовища. Зробити це можна, передавши поточне середовище в метод with_env().

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

❇️ env_object = self.env(
user=self.browse_ref('base.public_user'))

self = self.with_env(env_objcect)

❇️ env_object_ = api.Environment(
cr, self._session.uid, self._session.context)

self = self.with_env(env_objcect)

➖➖➖

𝐖𝐡𝐲 𝐢𝐬 𝐢𝐭 𝐢𝐦𝐩𝐨𝐫𝐭𝐚𝐧𝐭?

⏏ Testing code in a different environment
⏏ Changing the current Cr ( database cursor), Context, and user , Language
⏏ Change the entire environment for the model

⏏ Тестування коду в іншому середовищі
⏏ Зміна поточного Cr ( курсор бази даних), Контекст і користувач , Мова
⏏ Змініть все оточення для моделі

----------------------------------------------------------------------------------------------------------------------------------------------
19. Model.sudo() 💧

The method is used to turn on superuser mode for a model.
Метод використовується для ввімкнення режиму суперкористувача для моделі.

When 𝐬𝐮𝐩𝐞𝐫𝐮𝐬𝐞𝐫 𝐦𝐨𝐝𝐞 is turned on, the user skips all checks for access rights and can do anything they want. This can help the user do things like create, delete, or change records that they usually wouldn't be able to do in a normal way.
При включенні режиму суперкористувача користувач пропускає всі перевірки прав доступу і може робити все, що захоче. Це може допомогти користувачеві виконувати такі дії, як створення, видалення або змінення записів, які він зазвичай не може робити звичайним способом.

🥁 𝑬𝒙𝒂𝒎𝒑𝒍𝒆

self.env['project.task'].𝐬𝐮𝐝𝐨().browse(7).unlink()

# with sudo False
repairs = self.𝐬𝐮𝐝𝐨().repair_ids
if repairs:
repairs.𝐬𝐮𝐝𝐨(𝐅𝐚𝐥𝐬𝐞).state = '2binvoiced'

➖➖➖

🥁 The Model.sudo() method takes an optional argument, flag,
which specifies whether to enable or disable superuser mode.
The default value of flag is true.

🥁 Метод Model.sudo() приймає необов'язковий аргумент, flag,
який визначає, вмикати або вимикати режим суперкористувача.
Типовим значенням flag є true.

➖➖➖

☘ The Model.sudo() method should be used for a limited time
☘ Метод Model.sudo() слід використовувати протягом обмеженого часу

☘ The Model.sudo() method should be used with caution, as it can bypass all access rights checks
☘ Метод Model.sudo() слід використовувати з обережністю, оскільки він може обійти всі перевірки прав доступу

----------------------------------------------------------------------------------------------------------------------------------------------
