1. ORM Methods : 𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬() Function

It is a helper function that can be used to verify that the current user is allowed to perform a given operation, like writing to a model.
Це допоміжна функція, яку можна використовувати для перевірки того, що поточному користувачеві дозволено виконувати задану операцію, наприклад, запис до моделі.

𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬
⚒ operation : create, read, write, or unlink
⚒ raise_exception: A boolean value that indicates whether an exception should be raised if the operation is forbidden.


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

self.with_user(4).env['account.move.line'].
𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬('read', raise_exception=False)
# 𝐓𝐫𝐮𝐞 or 𝐅𝐚𝐥𝐬𝐞 depends on security applied to the user

self.with_user(4).env['account.move.line'].
𝐜𝐡𝐞𝐜𝐤_𝐚𝐜𝐜𝐞𝐬𝐬_𝐫𝐢𝐠𝐡𝐭𝐬('read',raise_exception=True)
# in case there are no access rights for this user,
# you will get 𝐞𝐱𝐜𝐞𝐩𝐭𝐢𝐨𝐧 like below
# You are not allowed to access 'Journal Item' (account.move.line) records


💡 What is the expected Exception if no access rights are granted ?
IF operation == read
# {AccessError} You are not allowed to access...
IF operation == create
# {AccessError} You are not allowed to create...
IF operation == delete
# {AccessError} You are not allowed to delete...
IF operation == write
# {AccessError} You are not allowed to modify...

Feel free to let me know if you need more information about when or how to use this function.

2. ORM Methods : 𝐮𝐬𝐞𝐫_𝐡𝐚𝐬_𝐠𝐫𝐨𝐮𝐩𝐬 Function

The user_has_groups function is a model method that can be used to check
if the user is a member of at least one of the groups
specified in the groups passed.
Функція user_has_groups є модельним методом, який може бути використаний для перевірки
якщо користувач є учасником хоча б однієї з груп
зазначена в пройдених групах.

🌀  𝐀𝐫𝐠𝐮𝐦𝐞𝐧𝐭𝐬
groups : comma-separated list of fully-qualified group external IDs

🌀  𝐑𝐞𝐭𝐮𝐫𝐧
True if the current user is a member of one of the groups in groups
else False

🌀  𝐄𝐱𝐚𝐦𝐩𝐥𝐞
groups = 'base.group_no_one, base.group_admin'
has_groups = self.𝐮𝐬𝐞𝐫_𝐡𝐚𝐬_𝐠𝐫𝐨𝐮𝐩𝐬(groups)
# True or False depend on groups assigned to the user

3. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : default_get Function ☔

default_get() method can be used to get a list of fields' default values.

It takes a list of field names as input and gives back a dictionary
that maps field names to their default values.

Метод default_get() можна використовувати для отримання списку значень полів за замовчуванням.

Він приймає список назв полів як вхідні дані та повертає словник
, який зіставляє імена полів зі значеннями за замовчуванням.

🐟 # get a list of fields' default values
fields = ['𝐜𝐨𝐦𝐩𝐚𝐧𝐲_𝐢𝐝', '𝐬𝐭𝐚𝐭𝐞', '𝐝𝐚𝐭𝐞_𝐟𝐫𝐨𝐦']
self.env['hr.payslip'].default_get(fields)

# Result:
{'𝐜𝐨𝐦𝐩𝐚𝐧𝐲_𝐢𝐝': 1, '𝐝𝐚𝐭𝐞_𝐟𝐫𝐨𝐦': 2023-10-01, '𝐬𝐭𝐚𝐭𝐞': 'draft'}


🔽 The following determines the default values:

↪ From the field itself: If the field has a default value,
that value is used.

↪ From the context

↪ If there is a record for the field in the 𝐢𝐫.𝐝𝐞𝐟𝐚𝐮𝐥𝐭 𝐭𝐚𝐛𝐥𝐞,
The value of that record is used as the field's default value(s).

↪ From the parent model: If the field is inherited from a parent model, the default_get() function is called on the parent model to get the default value for the field.


🐟 # Update default value for field
@api.model
def default_get(self, fields_list):
x = super(MyModel, self).default_get(fields_list)
x['country_id'] = self.env.context.get('country_id')
return x

The default_get() function can be used to

🔆 save you time while creating new record
🔆 Improved user experience
🔆 Reduced errors when user entering data from form view
🔆 Increased efficiency: users can create new records more quickly and easily.

4. 📚 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : Sorted Function

The sorted() function is a powerful function for ordering records.
It is possible to sort records using any field or even a custom function.

# Sort the records from oldest to newest by ID.
env['sale.order'].search([]).sorted(key='id')

The sorted() method takes three arguments  
♦ 𝘴𝘦𝘭𝘧 : The recordset that you want to

♦ key: A function or field name that is used to determine the sorting order.

♦ reverse: A boolean value that indicates whether the records should be sorted in reverse order


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

🐟 # Sort the records from 𝐨𝐥𝐝𝐞𝐬𝐭 to 𝐧𝐞𝐰𝐞𝐬𝐭
by create date.
env['sale.order'].search([]).
𝐬𝐨𝐫𝐭𝐞𝐝(key='create_date').
mapped('create_date')
# [ (2023, 10, 01), (2023, 10, 02), (2023, 10, 03)]


🐟 # Sort the records from 𝐧𝐞𝐰𝐞𝐬𝐭 to 𝐨𝐥𝐝𝐞𝐬𝐭
by create date.
env['sale.order'].search([]).
𝐬𝐨𝐫𝐭𝐞𝐝(key='create_date', 𝐫𝐞𝐯𝐞𝐫𝐬𝐞=𝐓𝐫𝐮𝐞).
mapped('create_date')

# [ (2023, 10, 03), (2023, 10, 02), (2023, 10, 01)]


🐟 # Sort the records using multiple fields
env['sale.order'].search([]).
𝐬𝐨𝐫𝐭𝐞𝐝(key=lambda x: (𝐱.𝐧𝐚𝐦𝐞, 𝐱.𝐩𝐚𝐫𝐭𝐧𝐞𝐫_𝐢𝐝, 𝐱.𝐜𝐫𝐞𝐚𝐭𝐞_𝐝𝐚𝐭𝐞))

# sale.order(1, 2, 3, 4)

5. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : 𝐅𝐢𝐥𝐭𝐞𝐫𝐞𝐝 Function ☔

filtered() is a powerful function that allows you to filter records based on a given criteria. This can be useful for a variety of tasks, such as:

Only processing records that meet certain conditions. For example, you might want to only process records that have a certain status.

The filtered() function takes two arguments:

♦ 𝘴𝘦𝘭𝘧 :  The recordset that you want to filter.
♦ 𝘧𝘶𝘯𝘤 : A function or a dot-separated sequence of field names

𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

# Only keep records of whose user is the current user.
⏩ records.filtered(lambda r: r.user_id == user.id)

# Only keep records that have a status of "done".
⏩ records.filtered("state == 'done'")

# Only keep records of whose partner is a company.
⏩ records.filtered("partner_id.is_company")

The filtered() function is very efficient and can be used
to filter large recordsets quickly

6. 𝐎𝐑𝐌 𝐌𝐞𝐭𝐡𝐨𝐝𝐬 : 𝐌𝐚𝐩𝐩𝐞𝐝 Function ☔

mapped() is quite important in code optimization
It avoids loops that have been defined by the user.
It gives you a list of field values. Its argument accepts a string value as the column name and returns all the possible values from the recordset.

The mapped() function takes two arguments:

𝐬𝐞𝐥𝐟: The recordset to which the function will be applied.
𝐟𝐮𝐧𝐜: A function or a field name sequence separated by a dot.


𝐄𝐱𝐚𝐦𝐩𝐥𝐞𝐬

🌀 self.env['res.partner'].search([]).𝐦𝐚𝐩𝐩𝐞𝐝('email')
# ['test1@yourcompany', 'test2@agrolait', 'test3@example']

🌀 records.𝐦𝐚𝐩𝐩𝐞𝐝(lambda r: r.field1 + r.field2)
# loop every record and sum two fields

🌀 self.env['sale.order'].search([]).
𝐦𝐚𝐩𝐩𝐞𝐝('order_line.product_uom_qty')
# [3.0, 3.0, 2.0, 4.0, 6.0]
# Return quantity from each order line from order_line for each sale order


𝐓𝐡𝐞 𝐦𝐚𝐩𝐩𝐞𝐝() function can be used to implement a variety of different data transformations, such as:

❄ Calculating new fields
❄ Filtering records
❄ Converting recordsets to different formats
❄ Joining recordsets
